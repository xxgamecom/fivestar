// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FriendsCircleMessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ETHotfix {

  #region Messages
  /// <summary>
  ///获取自己已加入的亲友圈列表
  /// </summary>
  public partial class C2F_GetSelfFriendsList : pb::IMessage {
    private static readonly pb::MessageParser<C2F_GetSelfFriendsList> _parser = new pb::MessageParser<C2F_GetSelfFriendsList>(() => (C2F_GetSelfFriendsList)MessagePool.Instance.Fetch(typeof(C2F_GetSelfFriendsList)));
    public static pb::MessageParser<C2F_GetSelfFriendsList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class F2C_GetSelfFriendsList : pb::IMessage {
    private static readonly pb::MessageParser<F2C_GetSelfFriendsList> _parser = new pb::MessageParser<F2C_GetSelfFriendsList>(() => (F2C_GetSelfFriendsList)MessagePool.Instance.Fetch(typeof(F2C_GetSelfFriendsList)));
    public static pb::MessageParser<F2C_GetSelfFriendsList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_friendsCrircleIds_codec
        = pb::FieldCodec.ForInt32(10);
    private pbc::RepeatedField<int> friendsCrircleIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///所有的亲友圈ID
    /// </summary>
    public pbc::RepeatedField<int> FriendsCrircleIds {
      get { return friendsCrircleIds_; }
      set { friendsCrircleIds_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      friendsCrircleIds_.WriteTo(output, _repeated_friendsCrircleIds_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += friendsCrircleIds_.CalculateSize(_repeated_friendsCrircleIds_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      friendsCrircleIds_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            friendsCrircleIds_.AddEntriesFrom(input, _repeated_friendsCrircleIds_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///申请加入亲友圈
  /// </summary>
  public partial class C2F_ApplyJoinFriendsCircle : pb::IMessage {
    private static readonly pb::MessageParser<C2F_ApplyJoinFriendsCircle> _parser = new pb::MessageParser<C2F_ApplyJoinFriendsCircle>(() => (C2F_ApplyJoinFriendsCircle)MessagePool.Instance.Fetch(typeof(C2F_ApplyJoinFriendsCircle)));
    public static pb::MessageParser<C2F_ApplyJoinFriendsCircle> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private int friendsCrircleId_;
    /// <summary>
    ///亲友圈ID
    /// </summary>
    public int FriendsCrircleId {
      get { return friendsCrircleId_; }
      set {
        friendsCrircleId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (FriendsCrircleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FriendsCrircleId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (FriendsCrircleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendsCrircleId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      friendsCrircleId_ = 0;
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FriendsCrircleId = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class F2C_ApplyJoinFriendsCircle : pb::IMessage {
    private static readonly pb::MessageParser<F2C_ApplyJoinFriendsCircle> _parser = new pb::MessageParser<F2C_ApplyJoinFriendsCircle>(() => (F2C_ApplyJoinFriendsCircle)MessagePool.Instance.Fetch(typeof(F2C_ApplyJoinFriendsCircle)));
    public static pb::MessageParser<F2C_ApplyJoinFriendsCircle> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取推荐亲友圈 每次固定5个
  /// </summary>
  public partial class C2F_GetRecommendFriendsCircle : pb::IMessage {
    private static readonly pb::MessageParser<C2F_GetRecommendFriendsCircle> _parser = new pb::MessageParser<C2F_GetRecommendFriendsCircle>(() => (C2F_GetRecommendFriendsCircle)MessagePool.Instance.Fetch(typeof(C2F_GetRecommendFriendsCircle)));
    public static pb::MessageParser<C2F_GetRecommendFriendsCircle> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private int startIndex_;
    /// <summary>
    ///起始索引
    /// </summary>
    public int StartIndex {
      get { return startIndex_; }
      set {
        startIndex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (StartIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StartIndex);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (StartIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartIndex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      startIndex_ = 0;
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StartIndex = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class F2C_GetRecommendFriendsCircle : pb::IMessage {
    private static readonly pb::MessageParser<F2C_GetRecommendFriendsCircle> _parser = new pb::MessageParser<F2C_GetRecommendFriendsCircle>(() => (F2C_GetRecommendFriendsCircle)MessagePool.Instance.Fetch(typeof(F2C_GetRecommendFriendsCircle)));
    public static pb::MessageParser<F2C_GetRecommendFriendsCircle> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.FriendsCircle> _repeated_friendsCircleInfos_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.FriendsCircle.Parser);
    private pbc::RepeatedField<global::ETHotfix.FriendsCircle> friendsCircleInfos_ = new pbc::RepeatedField<global::ETHotfix.FriendsCircle>();
    /// <summary>
    ///亲友圈信息
    /// </summary>
    public pbc::RepeatedField<global::ETHotfix.FriendsCircle> FriendsCircleInfos {
      get { return friendsCircleInfos_; }
      set { friendsCircleInfos_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      friendsCircleInfos_.WriteTo(output, _repeated_friendsCircleInfos_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += friendsCircleInfos_.CalculateSize(_repeated_friendsCircleInfos_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < friendsCircleInfos_.Count; i++) { MessagePool.Instance.Recycle(friendsCircleInfos_[i]); }
      friendsCircleInfos_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            friendsCircleInfos_.AddEntriesFrom(input, _repeated_friendsCircleInfos_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取指定亲友圈信息
  /// </summary>
  public partial class C2F_GetFriendsCircleInfo : pb::IMessage {
    private static readonly pb::MessageParser<C2F_GetFriendsCircleInfo> _parser = new pb::MessageParser<C2F_GetFriendsCircleInfo>(() => (C2F_GetFriendsCircleInfo)MessagePool.Instance.Fetch(typeof(C2F_GetFriendsCircleInfo)));
    public static pb::MessageParser<C2F_GetFriendsCircleInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_friendsCrircleIds_codec
        = pb::FieldCodec.ForInt32(10);
    private pbc::RepeatedField<int> friendsCrircleIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///亲友圈ID
    /// </summary>
    public pbc::RepeatedField<int> FriendsCrircleIds {
      get { return friendsCrircleIds_; }
      set { friendsCrircleIds_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      friendsCrircleIds_.WriteTo(output, _repeated_friendsCrircleIds_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      size += friendsCrircleIds_.CalculateSize(_repeated_friendsCrircleIds_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      friendsCrircleIds_.Clear();
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            friendsCrircleIds_.AddEntriesFrom(input, _repeated_friendsCrircleIds_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class F2C_GetFriendsCircleInfo : pb::IMessage {
    private static readonly pb::MessageParser<F2C_GetFriendsCircleInfo> _parser = new pb::MessageParser<F2C_GetFriendsCircleInfo>(() => (F2C_GetFriendsCircleInfo)MessagePool.Instance.Fetch(typeof(F2C_GetFriendsCircleInfo)));
    public static pb::MessageParser<F2C_GetFriendsCircleInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.FriendsCircle> _repeated_frienCircleInfos_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.FriendsCircle.Parser);
    private pbc::RepeatedField<global::ETHotfix.FriendsCircle> frienCircleInfos_ = new pbc::RepeatedField<global::ETHotfix.FriendsCircle>();
    /// <summary>
    ///亲友圈信息
    /// </summary>
    public pbc::RepeatedField<global::ETHotfix.FriendsCircle> FrienCircleInfos {
      get { return frienCircleInfos_; }
      set { frienCircleInfos_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      frienCircleInfos_.WriteTo(output, _repeated_frienCircleInfos_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += frienCircleInfos_.CalculateSize(_repeated_frienCircleInfos_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < frienCircleInfos_.Count; i++) { MessagePool.Instance.Recycle(frienCircleInfos_[i]); }
      frienCircleInfos_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            frienCircleInfos_.AddEntriesFrom(input, _repeated_frienCircleInfos_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取申请加入亲友圈的玩家信息
  /// </summary>
  public partial class C2F_GetFriendsCircleApplyJoinList : pb::IMessage {
    private static readonly pb::MessageParser<C2F_GetFriendsCircleApplyJoinList> _parser = new pb::MessageParser<C2F_GetFriendsCircleApplyJoinList>(() => (C2F_GetFriendsCircleApplyJoinList)MessagePool.Instance.Fetch(typeof(C2F_GetFriendsCircleApplyJoinList)));
    public static pb::MessageParser<C2F_GetFriendsCircleApplyJoinList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private int friendsCrircleId_;
    /// <summary>
    ///亲友圈ID
    /// </summary>
    public int FriendsCrircleId {
      get { return friendsCrircleId_; }
      set {
        friendsCrircleId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (FriendsCrircleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FriendsCrircleId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (FriendsCrircleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendsCrircleId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      friendsCrircleId_ = 0;
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FriendsCrircleId = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class F2C_GetFriendsCircleApplyJoinList : pb::IMessage {
    private static readonly pb::MessageParser<F2C_GetFriendsCircleApplyJoinList> _parser = new pb::MessageParser<F2C_GetFriendsCircleApplyJoinList>(() => (F2C_GetFriendsCircleApplyJoinList)MessagePool.Instance.Fetch(typeof(F2C_GetFriendsCircleApplyJoinList)));
    public static pb::MessageParser<F2C_GetFriendsCircleApplyJoinList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<long> _repeated_applyJoinUserIdList_codec
        = pb::FieldCodec.ForInt64(10);
    private pbc::RepeatedField<long> applyJoinUserIdList_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///申请加入的玩家列表
    /// </summary>
    public pbc::RepeatedField<long> ApplyJoinUserIdList {
      get { return applyJoinUserIdList_; }
      set { applyJoinUserIdList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      applyJoinUserIdList_.WriteTo(output, _repeated_applyJoinUserIdList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += applyJoinUserIdList_.CalculateSize(_repeated_applyJoinUserIdList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      applyJoinUserIdList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            applyJoinUserIdList_.AddEntriesFrom(input, _repeated_applyJoinUserIdList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///处理申请信息
  /// </summary>
  public partial class C2F_DisposeApplyInfo : pb::IMessage {
    private static readonly pb::MessageParser<C2F_DisposeApplyInfo> _parser = new pb::MessageParser<C2F_DisposeApplyInfo>(() => (C2F_DisposeApplyInfo)MessagePool.Instance.Fetch(typeof(C2F_DisposeApplyInfo)));
    public static pb::MessageParser<C2F_DisposeApplyInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private int friendsCrircleId_;
    /// <summary>
    ///亲友圈ID
    /// </summary>
    public int FriendsCrircleId {
      get { return friendsCrircleId_; }
      set {
        friendsCrircleId_ = value;
      }
    }

    private long applyUserId_;
    /// <summary>
    ///申请人的UserId
    /// </summary>
    public long ApplyUserId {
      get { return applyUserId_; }
      set {
        applyUserId_ = value;
      }
    }

    private bool isConsent_;
    /// <summary>
    ///是否同意
    /// </summary>
    public bool IsConsent {
      get { return isConsent_; }
      set {
        isConsent_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (FriendsCrircleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FriendsCrircleId);
      }
      if (ApplyUserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ApplyUserId);
      }
      if (IsConsent != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsConsent);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (FriendsCrircleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendsCrircleId);
      }
      if (ApplyUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ApplyUserId);
      }
      if (IsConsent != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      friendsCrircleId_ = 0;
      applyUserId_ = 0;
      isConsent_ = false;
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FriendsCrircleId = input.ReadInt32();
            break;
          }
          case 16: {
            ApplyUserId = input.ReadInt64();
            break;
          }
          case 24: {
            IsConsent = input.ReadBool();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class F2C_DisposeApplyInfo : pb::IMessage {
    private static readonly pb::MessageParser<F2C_DisposeApplyInfo> _parser = new pb::MessageParser<F2C_DisposeApplyInfo>(() => (F2C_DisposeApplyInfo)MessagePool.Instance.Fetch(typeof(F2C_DisposeApplyInfo)));
    public static pb::MessageParser<F2C_DisposeApplyInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取排行榜信息
  /// </summary>
  public partial class C2F_GetRankingListInfo : pb::IMessage {
    private static readonly pb::MessageParser<C2F_GetRankingListInfo> _parser = new pb::MessageParser<C2F_GetRankingListInfo>(() => (C2F_GetRankingListInfo)MessagePool.Instance.Fetch(typeof(C2F_GetRankingListInfo)));
    public static pb::MessageParser<C2F_GetRankingListInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private int friendsCrircleId_;
    /// <summary>
    ///亲友圈ID
    /// </summary>
    public int FriendsCrircleId {
      get { return friendsCrircleId_; }
      set {
        friendsCrircleId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (FriendsCrircleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FriendsCrircleId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (FriendsCrircleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendsCrircleId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      friendsCrircleId_ = 0;
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FriendsCrircleId = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class F2C_GetRankingListInfo : pb::IMessage {
    private static readonly pb::MessageParser<F2C_GetRankingListInfo> _parser = new pb::MessageParser<F2C_GetRankingListInfo>(() => (F2C_GetRankingListInfo)MessagePool.Instance.Fetch(typeof(F2C_GetRankingListInfo)));
    public static pb::MessageParser<F2C_GetRankingListInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.RanKingPlayerInfo> _repeated_playerInfos_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.RanKingPlayerInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.RanKingPlayerInfo> playerInfos_ = new pbc::RepeatedField<global::ETHotfix.RanKingPlayerInfo>();
    /// <summary>
    ///排行榜玩家信息
    /// </summary>
    public pbc::RepeatedField<global::ETHotfix.RanKingPlayerInfo> PlayerInfos {
      get { return playerInfos_; }
      set { playerInfos_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      playerInfos_.WriteTo(output, _repeated_playerInfos_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += playerInfos_.CalculateSize(_repeated_playerInfos_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < playerInfos_.Count; i++) { MessagePool.Instance.Recycle(playerInfos_[i]); }
      playerInfos_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            playerInfos_.AddEntriesFrom(input, _repeated_playerInfos_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class RanKingPlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<RanKingPlayerInfo> _parser = new pb::MessageParser<RanKingPlayerInfo>(() => (RanKingPlayerInfo)MessagePool.Instance.Fetch(typeof(RanKingPlayerInfo)));
    public static pb::MessageParser<RanKingPlayerInfo> Parser { get { return _parser; } }

    private long userId_;
    /// <summary>
    ///玩家的UserID
    /// </summary>
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private int totalNumber_;
    /// <summary>
    ///总次数
    /// </summary>
    public int TotalNumber {
      get { return totalNumber_; }
      set {
        totalNumber_ = value;
      }
    }

    private int totalScore_;
    /// <summary>
    ///总积分
    /// </summary>
    public int TotalScore {
      get { return totalScore_; }
      set {
        totalScore_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (TotalNumber != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalNumber);
      }
      if (TotalScore != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalScore);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (TotalNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalNumber);
      }
      if (TotalScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalScore);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      userId_ = 0;
      totalNumber_ = 0;
      totalScore_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            TotalNumber = input.ReadInt32();
            break;
          }
          case 24: {
            TotalScore = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///打完一大局总结算 游戏服给亲友圈服发 玩家得分情况
  /// </summary>
  public partial class S2F_SendTotalPlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<S2F_SendTotalPlayerInfo> _parser = new pb::MessageParser<S2F_SendTotalPlayerInfo>(() => (S2F_SendTotalPlayerInfo)MessagePool.Instance.Fetch(typeof(S2F_SendTotalPlayerInfo)));
    public static pb::MessageParser<S2F_SendTotalPlayerInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int friendsCrircleId_;
    /// <summary>
    ///亲友圈ID
    /// </summary>
    public int FriendsCrircleId {
      get { return friendsCrircleId_; }
      set {
        friendsCrircleId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.TotalPlayerInfo> _repeated_totalPlayerInfos_codec
        = pb::FieldCodec.ForMessage(18, global::ETHotfix.TotalPlayerInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.TotalPlayerInfo> totalPlayerInfos_ = new pbc::RepeatedField<global::ETHotfix.TotalPlayerInfo>();
    /// <summary>
    ///玩家得分情况
    /// </summary>
    public pbc::RepeatedField<global::ETHotfix.TotalPlayerInfo> TotalPlayerInfos {
      get { return totalPlayerInfos_; }
      set { totalPlayerInfos_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (FriendsCrircleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FriendsCrircleId);
      }
      totalPlayerInfos_.WriteTo(output, _repeated_totalPlayerInfos_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (FriendsCrircleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendsCrircleId);
      }
      size += totalPlayerInfos_.CalculateSize(_repeated_totalPlayerInfos_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      friendsCrircleId_ = 0;
      for (int i = 0; i < totalPlayerInfos_.Count; i++) { MessagePool.Instance.Recycle(totalPlayerInfos_[i]); }
      totalPlayerInfos_.Clear();
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FriendsCrircleId = input.ReadInt32();
            break;
          }
          case 18: {
            totalPlayerInfos_.AddEntriesFrom(input, _repeated_totalPlayerInfos_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///打完一大局总结算 游戏服给亲友圈服发
  /// </summary>
  public partial class TotalPlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<TotalPlayerInfo> _parser = new pb::MessageParser<TotalPlayerInfo>(() => (TotalPlayerInfo)MessagePool.Instance.Fetch(typeof(TotalPlayerInfo)));
    public static pb::MessageParser<TotalPlayerInfo> Parser { get { return _parser; } }

    private long userId_;
    /// <summary>
    ///玩家的UserId
    /// </summary>
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private int totalScore_;
    /// <summary>
    ///总得分
    /// </summary>
    public int TotalScore {
      get { return totalScore_; }
      set {
        totalScore_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (TotalScore != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalScore);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (TotalScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalScore);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      userId_ = 0;
      totalScore_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            TotalScore = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///修改亲友圈玩法
  /// </summary>
  public partial class C2F_AlterWanFa : pb::IMessage {
    private static readonly pb::MessageParser<C2F_AlterWanFa> _parser = new pb::MessageParser<C2F_AlterWanFa>(() => (C2F_AlterWanFa)MessagePool.Instance.Fetch(typeof(C2F_AlterWanFa)));
    public static pb::MessageParser<C2F_AlterWanFa> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private int friendsCrircleId_;
    /// <summary>
    ///亲友圈ID
    /// </summary>
    public int FriendsCrircleId {
      get { return friendsCrircleId_; }
      set {
        friendsCrircleId_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_wanFaCofigs_codec
        = pb::FieldCodec.ForInt32(18);
    private pbc::RepeatedField<int> wanFaCofigs_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///玩法配置
    /// </summary>
    public pbc::RepeatedField<int> WanFaCofigs {
      get { return wanFaCofigs_; }
      set { wanFaCofigs_ = value; }
    }

    private long gameEntryId_;
    /// <summary>
    ///游戏类型ID现在只能是卡五星
    /// </summary>
    public long GameEntryId {
      get { return gameEntryId_; }
      set {
        gameEntryId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (FriendsCrircleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FriendsCrircleId);
      }
      wanFaCofigs_.WriteTo(output, _repeated_wanFaCofigs_codec);
      if (GameEntryId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(GameEntryId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (FriendsCrircleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendsCrircleId);
      }
      size += wanFaCofigs_.CalculateSize(_repeated_wanFaCofigs_codec);
      if (GameEntryId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GameEntryId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      friendsCrircleId_ = 0;
      wanFaCofigs_.Clear();
      gameEntryId_ = 0;
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FriendsCrircleId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            wanFaCofigs_.AddEntriesFrom(input, _repeated_wanFaCofigs_codec);
            break;
          }
          case 24: {
            GameEntryId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class F2C_AlterWanFa : pb::IMessage {
    private static readonly pb::MessageParser<F2C_AlterWanFa> _parser = new pb::MessageParser<F2C_AlterWanFa>(() => (F2C_AlterWanFa)MessagePool.Instance.Fetch(typeof(F2C_AlterWanFa)));
    public static pb::MessageParser<F2C_AlterWanFa> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取亲友圈成员列表
  /// </summary>
  public partial class C2F_GetMemberList : pb::IMessage {
    private static readonly pb::MessageParser<C2F_GetMemberList> _parser = new pb::MessageParser<C2F_GetMemberList>(() => (C2F_GetMemberList)MessagePool.Instance.Fetch(typeof(C2F_GetMemberList)));
    public static pb::MessageParser<C2F_GetMemberList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private int friendsCrircleId_;
    /// <summary>
    ///亲友圈ID
    /// </summary>
    public int FriendsCrircleId {
      get { return friendsCrircleId_; }
      set {
        friendsCrircleId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (FriendsCrircleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FriendsCrircleId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (FriendsCrircleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendsCrircleId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      friendsCrircleId_ = 0;
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FriendsCrircleId = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class F2C_GetMemberList : pb::IMessage {
    private static readonly pb::MessageParser<F2C_GetMemberList> _parser = new pb::MessageParser<F2C_GetMemberList>(() => (F2C_GetMemberList)MessagePool.Instance.Fetch(typeof(F2C_GetMemberList)));
    public static pb::MessageParser<F2C_GetMemberList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<long> _repeated_memberUserIdList_codec
        = pb::FieldCodec.ForInt64(10);
    private pbc::RepeatedField<long> memberUserIdList_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///成员列表
    /// </summary>
    public pbc::RepeatedField<long> MemberUserIdList {
      get { return memberUserIdList_; }
      set { memberUserIdList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      memberUserIdList_.WriteTo(output, _repeated_memberUserIdList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += memberUserIdList_.CalculateSize(_repeated_memberUserIdList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      memberUserIdList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            memberUserIdList_.AddEntriesFrom(input, _repeated_memberUserIdList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///修改推荐配置
  /// </summary>
  public partial class C2F_AlterIsRecommend : pb::IMessage {
    private static readonly pb::MessageParser<C2F_AlterIsRecommend> _parser = new pb::MessageParser<C2F_AlterIsRecommend>(() => (C2F_AlterIsRecommend)MessagePool.Instance.Fetch(typeof(C2F_AlterIsRecommend)));
    public static pb::MessageParser<C2F_AlterIsRecommend> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private int friendsCrircleId_;
    /// <summary>
    ///亲友圈ID
    /// </summary>
    public int FriendsCrircleId {
      get { return friendsCrircleId_; }
      set {
        friendsCrircleId_ = value;
      }
    }

    private bool isRecommend_;
    /// <summary>
    ///是否推荐
    /// </summary>
    public bool IsRecommend {
      get { return isRecommend_; }
      set {
        isRecommend_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (FriendsCrircleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FriendsCrircleId);
      }
      if (IsRecommend != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsRecommend);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (FriendsCrircleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendsCrircleId);
      }
      if (IsRecommend != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      friendsCrircleId_ = 0;
      isRecommend_ = false;
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FriendsCrircleId = input.ReadInt32();
            break;
          }
          case 16: {
            IsRecommend = input.ReadBool();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class F2C_AlterIsRecommend : pb::IMessage {
    private static readonly pb::MessageParser<F2C_AlterIsRecommend> _parser = new pb::MessageParser<F2C_AlterIsRecommend>(() => (F2C_AlterIsRecommend)MessagePool.Instance.Fetch(typeof(F2C_AlterIsRecommend)));
    public static pb::MessageParser<F2C_AlterIsRecommend> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///退出亲友圈
  /// </summary>
  public partial class C2F_OutFriendsCircle : pb::IMessage {
    private static readonly pb::MessageParser<C2F_OutFriendsCircle> _parser = new pb::MessageParser<C2F_OutFriendsCircle>(() => (C2F_OutFriendsCircle)MessagePool.Instance.Fetch(typeof(C2F_OutFriendsCircle)));
    public static pb::MessageParser<C2F_OutFriendsCircle> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private int friendsCrircleId_;
    /// <summary>
    ///亲友圈ID
    /// </summary>
    public int FriendsCrircleId {
      get { return friendsCrircleId_; }
      set {
        friendsCrircleId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (FriendsCrircleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FriendsCrircleId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (FriendsCrircleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendsCrircleId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      friendsCrircleId_ = 0;
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FriendsCrircleId = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class F2C_OutFriendsCircle : pb::IMessage {
    private static readonly pb::MessageParser<F2C_OutFriendsCircle> _parser = new pb::MessageParser<F2C_OutFriendsCircle>(() => (F2C_OutFriendsCircle)MessagePool.Instance.Fetch(typeof(F2C_OutFriendsCircle)));
    public static pb::MessageParser<F2C_OutFriendsCircle> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///把人踢出亲友圈
  /// </summary>
  public partial class C2F_KickOutFriendsCircle : pb::IMessage {
    private static readonly pb::MessageParser<C2F_KickOutFriendsCircle> _parser = new pb::MessageParser<C2F_KickOutFriendsCircle>(() => (C2F_KickOutFriendsCircle)MessagePool.Instance.Fetch(typeof(C2F_KickOutFriendsCircle)));
    public static pb::MessageParser<C2F_KickOutFriendsCircle> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private int friendsCrircleId_;
    /// <summary>
    ///亲友圈ID
    /// </summary>
    public int FriendsCrircleId {
      get { return friendsCrircleId_; }
      set {
        friendsCrircleId_ = value;
      }
    }

    private long operateUserId_;
    /// <summary>
    ///被踢出亲友圈的UserId
    /// </summary>
    public long OperateUserId {
      get { return operateUserId_; }
      set {
        operateUserId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (FriendsCrircleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FriendsCrircleId);
      }
      if (OperateUserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(OperateUserId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (FriendsCrircleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendsCrircleId);
      }
      if (OperateUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OperateUserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      friendsCrircleId_ = 0;
      operateUserId_ = 0;
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FriendsCrircleId = input.ReadInt32();
            break;
          }
          case 16: {
            OperateUserId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class F2C_KickOutFriendsCircle : pb::IMessage {
    private static readonly pb::MessageParser<F2C_KickOutFriendsCircle> _parser = new pb::MessageParser<F2C_KickOutFriendsCircle>(() => (F2C_KickOutFriendsCircle)MessagePool.Instance.Fetch(typeof(F2C_KickOutFriendsCircle)));
    public static pb::MessageParser<F2C_KickOutFriendsCircle> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///操作管理权限
  /// </summary>
  public partial class C2F_ManageJurisdictionOperate : pb::IMessage {
    private static readonly pb::MessageParser<C2F_ManageJurisdictionOperate> _parser = new pb::MessageParser<C2F_ManageJurisdictionOperate>(() => (C2F_ManageJurisdictionOperate)MessagePool.Instance.Fetch(typeof(C2F_ManageJurisdictionOperate)));
    public static pb::MessageParser<C2F_ManageJurisdictionOperate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private int friendsCrircleId_;
    /// <summary>
    ///亲友圈ID
    /// </summary>
    public int FriendsCrircleId {
      get { return friendsCrircleId_; }
      set {
        friendsCrircleId_ = value;
      }
    }

    private long operateUserId_;
    /// <summary>
    ///被操作管理权限的UserId
    /// </summary>
    public long OperateUserId {
      get { return operateUserId_; }
      set {
        operateUserId_ = value;
      }
    }

    private bool isSetManage_;
    /// <summary>
    ///是否设为管理
    /// </summary>
    public bool IsSetManage {
      get { return isSetManage_; }
      set {
        isSetManage_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (FriendsCrircleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FriendsCrircleId);
      }
      if (OperateUserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(OperateUserId);
      }
      if (IsSetManage != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsSetManage);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (FriendsCrircleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendsCrircleId);
      }
      if (OperateUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OperateUserId);
      }
      if (IsSetManage != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      friendsCrircleId_ = 0;
      operateUserId_ = 0;
      isSetManage_ = false;
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FriendsCrircleId = input.ReadInt32();
            break;
          }
          case 16: {
            OperateUserId = input.ReadInt64();
            break;
          }
          case 24: {
            IsSetManage = input.ReadBool();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class F2C_ManageJurisdictionOperate : pb::IMessage {
    private static readonly pb::MessageParser<F2C_ManageJurisdictionOperate> _parser = new pb::MessageParser<F2C_ManageJurisdictionOperate>(() => (F2C_ManageJurisdictionOperate)MessagePool.Instance.Fetch(typeof(F2C_ManageJurisdictionOperate)));
    public static pb::MessageParser<F2C_ManageJurisdictionOperate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///修改亲友圈公告
  /// </summary>
  public partial class C2F_AlterAnnouncement : pb::IMessage {
    private static readonly pb::MessageParser<C2F_AlterAnnouncement> _parser = new pb::MessageParser<C2F_AlterAnnouncement>(() => (C2F_AlterAnnouncement)MessagePool.Instance.Fetch(typeof(C2F_AlterAnnouncement)));
    public static pb::MessageParser<C2F_AlterAnnouncement> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private int friendsCrircleId_;
    /// <summary>
    ///亲友圈ID
    /// </summary>
    public int FriendsCrircleId {
      get { return friendsCrircleId_; }
      set {
        friendsCrircleId_ = value;
      }
    }

    private string announcement_ = "";
    /// <summary>
    ///公告内容
    /// </summary>
    public string Announcement {
      get { return announcement_; }
      set {
        announcement_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (FriendsCrircleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FriendsCrircleId);
      }
      if (Announcement.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Announcement);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (FriendsCrircleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendsCrircleId);
      }
      if (Announcement.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Announcement);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      friendsCrircleId_ = 0;
      announcement_ = "";
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FriendsCrircleId = input.ReadInt32();
            break;
          }
          case 18: {
            Announcement = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class F2C_AlterAnnouncement : pb::IMessage {
    private static readonly pb::MessageParser<F2C_AlterAnnouncement> _parser = new pb::MessageParser<F2C_AlterAnnouncement>(() => (F2C_AlterAnnouncement)MessagePool.Instance.Fetch(typeof(F2C_AlterAnnouncement)));
    public static pb::MessageParser<F2C_AlterAnnouncement> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///创建亲友圈
  /// </summary>
  public partial class C2F_CreatorFriendCircle : pb::IMessage {
    private static readonly pb::MessageParser<C2F_CreatorFriendCircle> _parser = new pb::MessageParser<C2F_CreatorFriendCircle>(() => (C2F_CreatorFriendCircle)MessagePool.Instance.Fetch(typeof(C2F_CreatorFriendCircle)));
    public static pb::MessageParser<C2F_CreatorFriendCircle> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private string name_ = "";
    /// <summary>
    ///亲友圈名字
    /// </summary>
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string announcement_ = "";
    /// <summary>
    ///公告内容
    /// </summary>
    public string Announcement {
      get { return announcement_; }
      set {
        announcement_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long gameEntryId_;
    /// <summary>
    ///默认玩法游戏Id
    /// </summary>
    public long GameEntryId {
      get { return gameEntryId_; }
      set {
        gameEntryId_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_wanFaCofigs_codec
        = pb::FieldCodec.ForInt32(34);
    private pbc::RepeatedField<int> wanFaCofigs_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///玩法配置
    /// </summary>
    public pbc::RepeatedField<int> WanFaCofigs {
      get { return wanFaCofigs_; }
      set { wanFaCofigs_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Announcement.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Announcement);
      }
      if (GameEntryId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(GameEntryId);
      }
      wanFaCofigs_.WriteTo(output, _repeated_wanFaCofigs_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Announcement.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Announcement);
      }
      if (GameEntryId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GameEntryId);
      }
      size += wanFaCofigs_.CalculateSize(_repeated_wanFaCofigs_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      name_ = "";
      announcement_ = "";
      gameEntryId_ = 0;
      wanFaCofigs_.Clear();
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Announcement = input.ReadString();
            break;
          }
          case 24: {
            GameEntryId = input.ReadInt64();
            break;
          }
          case 34:
          case 32: {
            wanFaCofigs_.AddEntriesFrom(input, _repeated_wanFaCofigs_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class F2C_CreatorFriendCircle : pb::IMessage {
    private static readonly pb::MessageParser<F2C_CreatorFriendCircle> _parser = new pb::MessageParser<F2C_CreatorFriendCircle>(() => (F2C_CreatorFriendCircle)MessagePool.Instance.Fetch(typeof(F2C_CreatorFriendCircle)));
    public static pb::MessageParser<F2C_CreatorFriendCircle> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETHotfix.FriendsCircle friendsCircle_;
    /// <summary>
    ///亲友圈信息
    /// </summary>
    public global::ETHotfix.FriendsCircle FriendsCircle {
      get { return friendsCircle_; }
      set {
        friendsCircle_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (friendsCircle_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FriendsCircle);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (friendsCircle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FriendsCircle);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (friendsCircle_ != null) MessagePool.Instance.Recycle(friendsCircle_); friendsCircle_ = null;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (friendsCircle_ == null) {
              friendsCircle_ = new global::ETHotfix.FriendsCircle();
            }
            input.ReadMessage(friendsCircle_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///亲友圈基本信息 
  /// </summary>
  public partial class FriendsCircle : pb::IMessage {
    private static readonly pb::MessageParser<FriendsCircle> _parser = new pb::MessageParser<FriendsCircle>(() => (FriendsCircle)MessagePool.Instance.Fetch(typeof(FriendsCircle)));
    public static pb::MessageParser<FriendsCircle> Parser { get { return _parser; } }

    private int friendsCircleId_;
    /// <summary>
    ///亲友圈ID
    /// </summary>
    public int FriendsCircleId {
      get { return friendsCircleId_; }
      set {
        friendsCircleId_ = value;
      }
    }

    private string name_ = "";
    /// <summary>
    ///亲友圈名字
    /// </summary>
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long createUserId_;
    /// <summary>
    ///创建人UserId
    /// </summary>
    public long CreateUserId {
      get { return createUserId_; }
      set {
        createUserId_ = value;
      }
    }

    private int totalNumber_;
    /// <summary>
    ///总人数
    /// </summary>
    public int TotalNumber {
      get { return totalNumber_; }
      set {
        totalNumber_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_defaultWanFaCofigs_codec
        = pb::FieldCodec.ForInt32(42);
    private pbc::RepeatedField<int> defaultWanFaCofigs_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///默认玩法配置
    /// </summary>
    public pbc::RepeatedField<int> DefaultWanFaCofigs {
      get { return defaultWanFaCofigs_; }
      set { defaultWanFaCofigs_ = value; }
    }

    private static readonly pb::FieldCodec<long> _repeated_manageUserIds_codec
        = pb::FieldCodec.ForInt64(50);
    private pbc::RepeatedField<long> manageUserIds_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///所有管理的UserId
    /// </summary>
    public pbc::RepeatedField<long> ManageUserIds {
      get { return manageUserIds_; }
      set { manageUserIds_ = value; }
    }

    private string announcement_ = "";
    /// <summary>
    ///亲友圈公告
    /// </summary>
    public string Announcement {
      get { return announcement_; }
      set {
        announcement_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private bool isRecommend_;
    /// <summary>
    ///是否推荐给陌生人
    /// </summary>
    public bool IsRecommend {
      get { return isRecommend_; }
      set {
        isRecommend_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (FriendsCircleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FriendsCircleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (CreateUserId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CreateUserId);
      }
      if (TotalNumber != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalNumber);
      }
      defaultWanFaCofigs_.WriteTo(output, _repeated_defaultWanFaCofigs_codec);
      manageUserIds_.WriteTo(output, _repeated_manageUserIds_codec);
      if (Announcement.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Announcement);
      }
      if (IsRecommend != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsRecommend);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (FriendsCircleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendsCircleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (CreateUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateUserId);
      }
      if (TotalNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalNumber);
      }
      size += defaultWanFaCofigs_.CalculateSize(_repeated_defaultWanFaCofigs_codec);
      size += manageUserIds_.CalculateSize(_repeated_manageUserIds_codec);
      if (Announcement.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Announcement);
      }
      if (IsRecommend != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      friendsCircleId_ = 0;
      name_ = "";
      createUserId_ = 0;
      totalNumber_ = 0;
      defaultWanFaCofigs_.Clear();
      manageUserIds_.Clear();
      announcement_ = "";
      isRecommend_ = false;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FriendsCircleId = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            CreateUserId = input.ReadInt64();
            break;
          }
          case 32: {
            TotalNumber = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            defaultWanFaCofigs_.AddEntriesFrom(input, _repeated_defaultWanFaCofigs_codec);
            break;
          }
          case 50:
          case 48: {
            manageUserIds_.AddEntriesFrom(input, _repeated_manageUserIds_codec);
            break;
          }
          case 58: {
            Announcement = input.ReadString();
            break;
          }
          case 64: {
            IsRecommend = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
