// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MatchMessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ETHotfix {

  #region Messages
  /// <summary>
  ///请求开始匹配
  /// </summary>
  public partial class C2M_StartMatch : pb::IMessage {
    private static readonly pb::MessageParser<C2M_StartMatch> _parser = new pb::MessageParser<C2M_StartMatch>(() => (C2M_StartMatch)MessagePool.Instance.Fetch(typeof(C2M_StartMatch)));
    public static pb::MessageParser<C2M_StartMatch> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private global::ETHotfix.User user_;
    public global::ETHotfix.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    private long sessionActorId_;
    /// <summary>
    ///网关的InsinId
    /// </summary>
    public long SessionActorId {
      get { return sessionActorId_; }
      set {
        sessionActorId_ = value;
      }
    }

    private long matchRoomId_;
    /// <summary>
    /// 匹配房间ID
    /// </summary>
    public long MatchRoomId {
      get { return matchRoomId_; }
      set {
        matchRoomId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchRoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MatchRoomId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
      if (user_ != null) {
        output.WriteRawTag(226, 5);
        output.WriteMessage(User);
      }
      if (SessionActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(SessionActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (user_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (SessionActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SessionActorId);
      }
      if (MatchRoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MatchRoomId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      matchRoomId_ = 0;
      rpcId_ = 0;
      userId_ = 0;
      if (user_ != null) MessagePool.Instance.Recycle(user_); user_ = null;
      sessionActorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MatchRoomId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
          case 738: {
            if (user_ == null) {
              user_ = new global::ETHotfix.User();
            }
            input.ReadMessage(user_);
            break;
          }
          case 744: {
            SessionActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_StartMatch : pb::IMessage {
    private static readonly pb::MessageParser<M2C_StartMatch> _parser = new pb::MessageParser<M2C_StartMatch>(() => (M2C_StartMatch)MessagePool.Instance.Fetch(typeof(M2C_StartMatch)));
    public static pb::MessageParser<M2C_StartMatch> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求创建创建房间 
  /// </summary>
  public partial class C2M_CreateRoom : pb::IMessage {
    private static readonly pb::MessageParser<C2M_CreateRoom> _parser = new pb::MessageParser<C2M_CreateRoom>(() => (C2M_CreateRoom)MessagePool.Instance.Fetch(typeof(C2M_CreateRoom)));
    public static pb::MessageParser<C2M_CreateRoom> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private global::ETHotfix.User user_;
    public global::ETHotfix.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    private long sessionActorId_;
    /// <summary>
    ///网关的InsinId
    /// </summary>
    public long SessionActorId {
      get { return sessionActorId_; }
      set {
        sessionActorId_ = value;
      }
    }

    private long gameEntryId_;
    /// <summary>
    ///游戏类型ID
    /// </summary>
    public long GameEntryId {
      get { return gameEntryId_; }
      set {
        gameEntryId_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_roomConfigLists_codec
        = pb::FieldCodec.ForInt32(18);
    private pbc::RepeatedField<int> roomConfigLists_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 房间配置信息
    /// </summary>
    public pbc::RepeatedField<int> RoomConfigLists {
      get { return roomConfigLists_; }
      set { roomConfigLists_ = value; }
    }

    private int friendsCircleId_;
    /// <summary>
    ///亲友圈ID 如果不为0就是在亲友群创建的房间 
    /// </summary>
    public int FriendsCircleId {
      get { return friendsCircleId_; }
      set {
        friendsCircleId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (GameEntryId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(GameEntryId);
      }
      roomConfigLists_.WriteTo(output, _repeated_roomConfigLists_codec);
      if (FriendsCircleId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FriendsCircleId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
      if (user_ != null) {
        output.WriteRawTag(226, 5);
        output.WriteMessage(User);
      }
      if (SessionActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(SessionActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (user_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (SessionActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SessionActorId);
      }
      if (GameEntryId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GameEntryId);
      }
      size += roomConfigLists_.CalculateSize(_repeated_roomConfigLists_codec);
      if (FriendsCircleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendsCircleId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      gameEntryId_ = 0;
      roomConfigLists_.Clear();
      friendsCircleId_ = 0;
      rpcId_ = 0;
      userId_ = 0;
      if (user_ != null) MessagePool.Instance.Recycle(user_); user_ = null;
      sessionActorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameEntryId = input.ReadInt64();
            break;
          }
          case 18:
          case 16: {
            roomConfigLists_.AddEntriesFrom(input, _repeated_roomConfigLists_codec);
            break;
          }
          case 24: {
            FriendsCircleId = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
          case 738: {
            if (user_ == null) {
              user_ = new global::ETHotfix.User();
            }
            input.ReadMessage(user_);
            break;
          }
          case 744: {
            SessionActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_CreateRoom : pb::IMessage {
    private static readonly pb::MessageParser<M2C_CreateRoom> _parser = new pb::MessageParser<M2C_CreateRoom>(() => (M2C_CreateRoom)MessagePool.Instance.Fetch(typeof(M2C_CreateRoom)));
    public static pb::MessageParser<M2C_CreateRoom> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETHotfix.RoomInfo roomInfo_;
    /// <summary>
    /// 房间信息
    /// </summary>
    public global::ETHotfix.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (roomInfo_ != null) MessagePool.Instance.Recycle(roomInfo_); roomInfo_ = null;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (roomInfo_ == null) {
              roomInfo_ = new global::ETHotfix.RoomInfo();
            }
            input.ReadMessage(roomInfo_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求加入房间 
  /// </summary>
  public partial class C2M_JoinRoom : pb::IMessage {
    private static readonly pb::MessageParser<C2M_JoinRoom> _parser = new pb::MessageParser<C2M_JoinRoom>(() => (C2M_JoinRoom)MessagePool.Instance.Fetch(typeof(C2M_JoinRoom)));
    public static pb::MessageParser<C2M_JoinRoom> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private global::ETHotfix.User user_;
    public global::ETHotfix.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    private long sessionActorId_;
    /// <summary>
    ///网关的InsinId
    /// </summary>
    public long SessionActorId {
      get { return sessionActorId_; }
      set {
        sessionActorId_ = value;
      }
    }

    private int roomId_;
    /// <summary>
    /// 房间Id
    /// </summary>
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
      if (user_ != null) {
        output.WriteRawTag(226, 5);
        output.WriteMessage(User);
      }
      if (SessionActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(SessionActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (user_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (SessionActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SessionActorId);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roomId_ = 0;
      rpcId_ = 0;
      userId_ = 0;
      if (user_ != null) MessagePool.Instance.Recycle(user_); user_ = null;
      sessionActorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
          case 738: {
            if (user_ == null) {
              user_ = new global::ETHotfix.User();
            }
            input.ReadMessage(user_);
            break;
          }
          case 744: {
            SessionActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_JoinRoom : pb::IMessage {
    private static readonly pb::MessageParser<M2C_JoinRoom> _parser = new pb::MessageParser<M2C_JoinRoom>(() => (M2C_JoinRoom)MessagePool.Instance.Fetch(typeof(M2C_JoinRoom)));
    public static pb::MessageParser<M2C_JoinRoom> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETHotfix.RoomInfo roomInfo_;
    /// <summary>
    /// 房间信息
    /// </summary>
    public global::ETHotfix.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (roomInfo_ != null) MessagePool.Instance.Recycle(roomInfo_); roomInfo_ = null;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (roomInfo_ == null) {
              roomInfo_ = new global::ETHotfix.RoomInfo();
            }
            input.ReadMessage(roomInfo_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求退出房间 
  /// </summary>
  public partial class C2M_OutRoom : pb::IMessage {
    private static readonly pb::MessageParser<C2M_OutRoom> _parser = new pb::MessageParser<C2M_OutRoom>(() => (C2M_OutRoom)MessagePool.Instance.Fetch(typeof(C2M_OutRoom)));
    public static pb::MessageParser<C2M_OutRoom> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_OutRoom : pb::IMessage {
    private static readonly pb::MessageParser<M2C_OutRoom> _parser = new pb::MessageParser<M2C_OutRoom>(() => (M2C_OutRoom)MessagePool.Instance.Fetch(typeof(M2C_OutRoom)));
    public static pb::MessageParser<M2C_OutRoom> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///其他玩家加入房间
  /// </summary>
  public partial class Actor_OtherJoinRoom : pb::IMessage {
    private static readonly pb::MessageParser<Actor_OtherJoinRoom> _parser = new pb::MessageParser<Actor_OtherJoinRoom>(() => (Actor_OtherJoinRoom)MessagePool.Instance.Fetch(typeof(Actor_OtherJoinRoom)));
    public static pb::MessageParser<Actor_OtherJoinRoom> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private global::ETHotfix.MatchPlayerInfo playerInfo_;
    /// <summary>
    ///加入房间玩家信息
    /// </summary>
    public global::ETHotfix.MatchPlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (playerInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerInfo);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (playerInfo_ != null) MessagePool.Instance.Recycle(playerInfo_); playerInfo_ = null;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerInfo_ == null) {
              playerInfo_ = new global::ETHotfix.MatchPlayerInfo();
            }
            input.ReadMessage(playerInfo_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///其他玩家退出房间
  /// </summary>
  public partial class Actor_OtherOutRoom : pb::IMessage {
    private static readonly pb::MessageParser<Actor_OtherOutRoom> _parser = new pb::MessageParser<Actor_OtherOutRoom>(() => (Actor_OtherOutRoom)MessagePool.Instance.Fetch(typeof(Actor_OtherOutRoom)));
    public static pb::MessageParser<Actor_OtherOutRoom> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long userId_;
    /// <summary>
    ///退出房间玩家ID
    /// </summary>
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      userId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///匹配服通知游戏服暂停计时 就是暂停游戏 
  /// </summary>
  public partial class Actor_PauseRoomGame : pb::IMessage {
    private static readonly pb::MessageParser<Actor_PauseRoomGame> _parser = new pb::MessageParser<Actor_PauseRoomGame>(() => (Actor_PauseRoomGame)MessagePool.Instance.Fetch(typeof(Actor_PauseRoomGame)));
    public static pb::MessageParser<Actor_PauseRoomGame> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private bool isPause_;
    /// <summary>
    ///是否暂停 false就是结束暂停
    /// </summary>
    public bool IsPause {
      get { return isPause_; }
      set {
        isPause_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IsPause != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsPause);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (IsPause != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      isPause_ = false;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsPause = input.ReadBool();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///匹配服通知游戏服房间解散
  /// </summary>
  public partial class Actor_RoomDissolve : pb::IMessage {
    private static readonly pb::MessageParser<Actor_RoomDissolve> _parser = new pb::MessageParser<Actor_RoomDissolve>(() => (Actor_RoomDissolve)MessagePool.Instance.Fetch(typeof(Actor_RoomDissolve)));
    public static pb::MessageParser<Actor_RoomDissolve> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///游戏服通知匹配服房间解散
  /// </summary>
  public partial class S2M_RoomDissolve : pb::IMessage {
    private static readonly pb::MessageParser<S2M_RoomDissolve> _parser = new pb::MessageParser<S2M_RoomDissolve>(() => (S2M_RoomDissolve)MessagePool.Instance.Fetch(typeof(S2M_RoomDissolve)));
    public static pb::MessageParser<S2M_RoomDissolve> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int roomId_;
    /// <summary>
    ///解散房间ID
    /// </summary>
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private int currOfficNum_;
    /// <summary>
    ///当前局数
    /// </summary>
    public int CurrOfficNum {
      get { return currOfficNum_; }
      set {
        currOfficNum_ = value;
      }
    }

    private int currRoomStateType_;
    /// <summary>
    ///房间当前状态
    /// </summary>
    public int CurrRoomStateType {
      get { return currRoomStateType_; }
      set {
        currRoomStateType_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomId);
      }
      if (CurrOfficNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrOfficNum);
      }
      if (CurrRoomStateType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurrRoomStateType);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (CurrOfficNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrOfficNum);
      }
      if (CurrRoomStateType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrRoomStateType);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roomId_ = 0;
      currOfficNum_ = 0;
      currRoomStateType_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadInt32();
            break;
          }
          case 16: {
            CurrOfficNum = input.ReadInt32();
            break;
          }
          case 24: {
            CurrRoomStateType = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家投票解散房间选择
  /// </summary>
  public partial class Actor_VoteDissolveSelect : pb::IMessage {
    private static readonly pb::MessageParser<Actor_VoteDissolveSelect> _parser = new pb::MessageParser<Actor_VoteDissolveSelect>(() => (Actor_VoteDissolveSelect)MessagePool.Instance.Fetch(typeof(Actor_VoteDissolveSelect)));
    public static pb::MessageParser<Actor_VoteDissolveSelect> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private bool isConsent_;
    /// <summary>
    ///玩家是否同意
    /// </summary>
    public bool IsConsent {
      get { return isConsent_; }
      set {
        isConsent_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IsConsent != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsConsent);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (IsConsent != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      isConsent_ = false;
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsConsent = input.ReadBool();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家投票解散房间结果
  /// </summary>
  public partial class Actor_VoteDissolveRoomResult : pb::IMessage {
    private static readonly pb::MessageParser<Actor_VoteDissolveRoomResult> _parser = new pb::MessageParser<Actor_VoteDissolveRoomResult>(() => (Actor_VoteDissolveRoomResult)MessagePool.Instance.Fetch(typeof(Actor_VoteDissolveRoomResult)));
    public static pb::MessageParser<Actor_VoteDissolveRoomResult> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long sponsorUserId_;
    /// <summary>
    ///发起人的UsserId
    /// </summary>
    public long SponsorUserId {
      get { return sponsorUserId_; }
      set {
        sponsorUserId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.VoteInfo> _repeated_voteInfos_codec
        = pb::FieldCodec.ForMessage(18, global::ETHotfix.VoteInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.VoteInfo> voteInfos_ = new pbc::RepeatedField<global::ETHotfix.VoteInfo>();
    /// <summary>
    ///所有玩家投票信息
    /// </summary>
    public pbc::RepeatedField<global::ETHotfix.VoteInfo> VoteInfos {
      get { return voteInfos_; }
      set { voteInfos_ = value; }
    }

    private int result_;
    /// <summary>
    ///-1不同意 没解散 0进行中 1所有人同意解散房间
    /// </summary>
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SponsorUserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SponsorUserId);
      }
      voteInfos_.WriteTo(output, _repeated_voteInfos_codec);
      if (Result != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Result);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (SponsorUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SponsorUserId);
      }
      size += voteInfos_.CalculateSize(_repeated_voteInfos_codec);
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      sponsorUserId_ = 0;
      for (int i = 0; i < voteInfos_.Count; i++) { MessagePool.Instance.Recycle(voteInfos_[i]); }
      voteInfos_.Clear();
      result_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SponsorUserId = input.ReadInt64();
            break;
          }
          case 18: {
            voteInfos_.AddEntriesFrom(input, _repeated_voteInfos_codec);
            break;
          }
          case 24: {
            Result = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///单个玩家投票信息
  /// </summary>
  public partial class VoteInfo : pb::IMessage {
    private static readonly pb::MessageParser<VoteInfo> _parser = new pb::MessageParser<VoteInfo>(() => (VoteInfo)MessagePool.Instance.Fetch(typeof(VoteInfo)));
    public static pb::MessageParser<VoteInfo> Parser { get { return _parser; } }

    private long userId_;
    /// <summary>
    ///投票玩家的id
    /// </summary>
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private bool isConsent_;
    /// <summary>
    ///玩家是否同意
    /// </summary>
    public bool IsConsent {
      get { return isConsent_; }
      set {
        isConsent_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (IsConsent != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsConsent);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (IsConsent != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      userId_ = 0;
      isConsent_ = false;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            IsConsent = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家聊天请求
  /// </summary>
  public partial class C2M_UserChat : pb::IMessage {
    private static readonly pb::MessageParser<C2M_UserChat> _parser = new pb::MessageParser<C2M_UserChat>(() => (C2M_UserChat)MessagePool.Instance.Fetch(typeof(C2M_UserChat)));
    public static pb::MessageParser<C2M_UserChat> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private global::ETHotfix.ChatInfo chatInfo_;
    /// <summary>
    ///聊天信息
    /// </summary>
    public global::ETHotfix.ChatInfo ChatInfo {
      get { return chatInfo_; }
      set {
        chatInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (chatInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ChatInfo);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (chatInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChatInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (chatInfo_ != null) MessagePool.Instance.Recycle(chatInfo_); chatInfo_ = null;
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (chatInfo_ == null) {
              chatInfo_ = new global::ETHotfix.ChatInfo();
            }
            input.ReadMessage(chatInfo_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_UserChat : pb::IMessage {
    private static readonly pb::MessageParser<M2C_UserChat> _parser = new pb::MessageParser<M2C_UserChat>(() => (M2C_UserChat)MessagePool.Instance.Fetch(typeof(M2C_UserChat)));
    public static pb::MessageParser<M2C_UserChat> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///广播Actor的聊天信息
  /// </summary>
  public partial class Actor_UserChatInfo : pb::IMessage {
    private static readonly pb::MessageParser<Actor_UserChatInfo> _parser = new pb::MessageParser<Actor_UserChatInfo>(() => (Actor_UserChatInfo)MessagePool.Instance.Fetch(typeof(Actor_UserChatInfo)));
    public static pb::MessageParser<Actor_UserChatInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long userId_;
    /// <summary>
    ///发消息人的userID
    /// </summary>
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private global::ETHotfix.ChatInfo chatInfo_;
    /// <summary>
    ///聊天信息
    /// </summary>
    public global::ETHotfix.ChatInfo ChatInfo {
      get { return chatInfo_; }
      set {
        chatInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (chatInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ChatInfo);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (chatInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChatInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      userId_ = 0;
      if (chatInfo_ != null) MessagePool.Instance.Recycle(chatInfo_); chatInfo_ = null;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 18: {
            if (chatInfo_ == null) {
              chatInfo_ = new global::ETHotfix.ChatInfo();
            }
            input.ReadMessage(chatInfo_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///聊天信息
  /// </summary>
  public partial class ChatInfo : pb::IMessage {
    private static readonly pb::MessageParser<ChatInfo> _parser = new pb::MessageParser<ChatInfo>(() => (ChatInfo)MessagePool.Instance.Fetch(typeof(ChatInfo)));
    public static pb::MessageParser<ChatInfo> Parser { get { return _parser; } }

    private int chatType_;
    /// <summary>
    ///聊天类型 (1.文字 2.快捷文字 3.正常动态表情 4.魔法表情 5.语音)
    /// </summary>
    public int ChatType {
      get { return chatType_; }
      set {
        chatType_ = value;
      }
    }

    private string content_ = "";
    /// <summary>
    /// 聊天内容
    /// </summary>
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private pb::ByteString voiceContent_ = pb::ByteString.Empty;
    /// <summary>
    ///语音内容
    /// </summary>
    public pb::ByteString VoiceContent {
      get { return voiceContent_; }
      set {
        voiceContent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ChatType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChatType);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Content);
      }
      if (VoiceContent.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(VoiceContent);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ChatType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChatType);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (VoiceContent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(VoiceContent);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      chatType_ = 0;
      content_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChatType = input.ReadInt32();
            break;
          }
          case 18: {
            Content = input.ReadString();
            break;
          }
          case 26: {
            VoiceContent = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///通知游戏服开始一局游戏
  /// </summary>
  public partial class M2S_StartGame : pb::IMessage {
    private static readonly pb::MessageParser<M2S_StartGame> _parser = new pb::MessageParser<M2S_StartGame>(() => (M2S_StartGame)MessagePool.Instance.Fetch(typeof(M2S_StartGame)));
    public static pb::MessageParser<M2S_StartGame> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.MatchPlayerInfo> _repeated_matchPlayerInfos_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.MatchPlayerInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.MatchPlayerInfo> matchPlayerInfos_ = new pbc::RepeatedField<global::ETHotfix.MatchPlayerInfo>();
    /// <summary>
    ///玩家信息
    /// </summary>
    public pbc::RepeatedField<global::ETHotfix.MatchPlayerInfo> MatchPlayerInfos {
      get { return matchPlayerInfos_; }
      set { matchPlayerInfos_ = value; }
    }

    private int roomType_;
    /// <summary>
    ///房间类型 1.是匹配 2.是自定义房卡
    /// </summary>
    public int RoomType {
      get { return roomType_; }
      set {
        roomType_ = value;
      }
    }

    private global::ETHotfix.MatchRoomConfig roomConfig_;
    /// <summary>
    ///房间配置信息
    /// </summary>
    public global::ETHotfix.MatchRoomConfig RoomConfig {
      get { return roomConfig_; }
      set {
        roomConfig_ = value;
      }
    }

    private int needJeweNumCount_;
    /// <summary>
    ///需要钻石的数量
    /// </summary>
    public int NeedJeweNumCount {
      get { return needJeweNumCount_; }
      set {
        needJeweNumCount_ = value;
      }
    }

    private int roomId_;
    /// <summary>
    ///房间的ID
    /// </summary>
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private int friendsCircleId_;
    /// <summary>
    ///亲友圈id
    /// </summary>
    public int FriendsCircleId {
      get { return friendsCircleId_; }
      set {
        friendsCircleId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      matchPlayerInfos_.WriteTo(output, _repeated_matchPlayerInfos_codec);
      if (RoomType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomType);
      }
      if (roomConfig_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RoomConfig);
      }
      if (NeedJeweNumCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NeedJeweNumCount);
      }
      if (RoomId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RoomId);
      }
      if (FriendsCircleId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FriendsCircleId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      size += matchPlayerInfos_.CalculateSize(_repeated_matchPlayerInfos_codec);
      if (RoomType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
      }
      if (roomConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomConfig);
      }
      if (NeedJeweNumCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NeedJeweNumCount);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (FriendsCircleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendsCircleId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < matchPlayerInfos_.Count; i++) { MessagePool.Instance.Recycle(matchPlayerInfos_[i]); }
      matchPlayerInfos_.Clear();
      roomType_ = 0;
      if (roomConfig_ != null) MessagePool.Instance.Recycle(roomConfig_); roomConfig_ = null;
      needJeweNumCount_ = 0;
      roomId_ = 0;
      friendsCircleId_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            matchPlayerInfos_.AddEntriesFrom(input, _repeated_matchPlayerInfos_codec);
            break;
          }
          case 16: {
            RoomType = input.ReadInt32();
            break;
          }
          case 34: {
            if (roomConfig_ == null) {
              roomConfig_ = new global::ETHotfix.MatchRoomConfig();
            }
            input.ReadMessage(roomConfig_);
            break;
          }
          case 40: {
            NeedJeweNumCount = input.ReadInt32();
            break;
          }
          case 48: {
            RoomId = input.ReadInt32();
            break;
          }
          case 56: {
            FriendsCircleId = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///游戏通知匹配服 开始游戏了 传一个房间ID
  /// </summary>
  public partial class S2M_StartGame : pb::IMessage {
    private static readonly pb::MessageParser<S2M_StartGame> _parser = new pb::MessageParser<S2M_StartGame>(() => (S2M_StartGame)MessagePool.Instance.Fetch(typeof(S2M_StartGame)));
    public static pb::MessageParser<S2M_StartGame> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int roomId_;
    /// <summary>
    ///房间的ID
    /// </summary>
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private long roomActorId_;
    /// <summary>
    ///房间对象的ID
    /// </summary>
    public long RoomActorId {
      get { return roomActorId_; }
      set {
        roomActorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomId);
      }
      if (RoomActorId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RoomActorId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (RoomActorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roomId_ = 0;
      roomActorId_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadInt32();
            break;
          }
          case 16: {
            RoomActorId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求亲友圈所有的房间列表
  /// </summary>
  public partial class C2M_GetFriendsCircleRoomList : pb::IMessage {
    private static readonly pb::MessageParser<C2M_GetFriendsCircleRoomList> _parser = new pb::MessageParser<C2M_GetFriendsCircleRoomList>(() => (C2M_GetFriendsCircleRoomList)MessagePool.Instance.Fetch(typeof(C2M_GetFriendsCircleRoomList)));
    public static pb::MessageParser<C2M_GetFriendsCircleRoomList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private int friendsCircleId_;
    /// <summary>
    ///亲友圈id
    /// </summary>
    public int FriendsCircleId {
      get { return friendsCircleId_; }
      set {
        friendsCircleId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (FriendsCircleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FriendsCircleId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (FriendsCircleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendsCircleId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      friendsCircleId_ = 0;
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FriendsCircleId = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_GetFriendsCircleRoomList : pb::IMessage {
    private static readonly pb::MessageParser<M2C_GetFriendsCircleRoomList> _parser = new pb::MessageParser<M2C_GetFriendsCircleRoomList>(() => (M2C_GetFriendsCircleRoomList)MessagePool.Instance.Fetch(typeof(M2C_GetFriendsCircleRoomList)));
    public static pb::MessageParser<M2C_GetFriendsCircleRoomList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.RoomInfo> _repeated_roomInfos_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.RoomInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.RoomInfo> roomInfos_ = new pbc::RepeatedField<global::ETHotfix.RoomInfo>();
    /// <summary>
    ///亲友圈所有对应的房间信息
    /// </summary>
    public pbc::RepeatedField<global::ETHotfix.RoomInfo> RoomInfos {
      get { return roomInfos_; }
      set { roomInfos_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      roomInfos_.WriteTo(output, _repeated_roomInfos_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += roomInfos_.CalculateSize(_repeated_roomInfos_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < roomInfos_.Count; i++) { MessagePool.Instance.Recycle(roomInfos_[i]); }
      roomInfos_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            roomInfos_.AddEntriesFrom(input, _repeated_roomInfos_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发送给客户端 告诉客户端该用户正在游戏中
  /// </summary>
  public partial class Actor_BeingInGame : pb::IMessage {
    private static readonly pb::MessageParser<Actor_BeingInGame> _parser = new pb::MessageParser<Actor_BeingInGame>(() => (Actor_BeingInGame)MessagePool.Instance.Fetch(typeof(Actor_BeingInGame)));
    public static pb::MessageParser<Actor_BeingInGame> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private bool isGameBeing_;
    public bool IsGameBeing {
      get { return isGameBeing_; }
      set {
        isGameBeing_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IsGameBeing != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsGameBeing);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (IsGameBeing != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      isGameBeing_ = false;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsGameBeing = input.ReadBool();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求断线重连的数据
  /// </summary>
  public partial class C2M_GetReconnectionRoomInfo : pb::IMessage {
    private static readonly pb::MessageParser<C2M_GetReconnectionRoomInfo> _parser = new pb::MessageParser<C2M_GetReconnectionRoomInfo>(() => (C2M_GetReconnectionRoomInfo)MessagePool.Instance.Fetch(typeof(C2M_GetReconnectionRoomInfo)));
    public static pb::MessageParser<C2M_GetReconnectionRoomInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_GetReconnectionRoomInfo : pb::IMessage {
    private static readonly pb::MessageParser<M2C_GetReconnectionRoomInfo> _parser = new pb::MessageParser<M2C_GetReconnectionRoomInfo>(() => (M2C_GetReconnectionRoomInfo)MessagePool.Instance.Fetch(typeof(M2C_GetReconnectionRoomInfo)));
    public static pb::MessageParser<M2C_GetReconnectionRoomInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private bool isGameBeing_;
    /// <summary>
    ///是否在游戏中
    /// </summary>
    public bool IsGameBeing {
      get { return isGameBeing_; }
      set {
        isGameBeing_ = value;
      }
    }

    private global::ETHotfix.RoomInfo roomInfos_;
    /// <summary>
    ///房间信息 如果在游戏中 而数据为空 就是需要游戏发来的游戏数据
    /// </summary>
    public global::ETHotfix.RoomInfo RoomInfos {
      get { return roomInfos_; }
      set {
        roomInfos_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IsGameBeing != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsGameBeing);
      }
      if (roomInfos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RoomInfos);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (IsGameBeing != false) {
        size += 1 + 1;
      }
      if (roomInfos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfos);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      isGameBeing_ = false;
      if (roomInfos_ != null) MessagePool.Instance.Recycle(roomInfos_); roomInfos_ = null;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsGameBeing = input.ReadBool();
            break;
          }
          case 18: {
            if (roomInfos_ == null) {
              roomInfos_ = new global::ETHotfix.RoomInfo();
            }
            input.ReadMessage(roomInfos_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发送给游戏服告诉他 玩家请求重连
  /// </summary>
  public partial class Actor_UserRequestReconnectionRoom : pb::IMessage {
    private static readonly pb::MessageParser<Actor_UserRequestReconnectionRoom> _parser = new pb::MessageParser<Actor_UserRequestReconnectionRoom>(() => (Actor_UserRequestReconnectionRoom)MessagePool.Instance.Fetch(typeof(Actor_UserRequestReconnectionRoom)));
    public static pb::MessageParser<Actor_UserRequestReconnectionRoom> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long userId_;
    /// <summary>
    ///玩家的id
    /// </summary>
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private long userActorId_;
    /// <summary>
    ///发消息给客户端需要的id 就是网关的SessionId
    /// </summary>
    public long UserActorId {
      get { return userActorId_; }
      set {
        userActorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (UserActorId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserActorId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (UserActorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      userId_ = 0;
      userActorId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            UserActorId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 752: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
