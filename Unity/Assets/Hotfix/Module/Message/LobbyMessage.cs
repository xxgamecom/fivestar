// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LobbyMessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ETHotfix {

  #region Messages
  /// <summary>
  ///请求公告
  /// </summary>
  public partial class C2L_GetAnnouncement : pb::IMessage {
    private static readonly pb::MessageParser<C2L_GetAnnouncement> _parser = new pb::MessageParser<C2L_GetAnnouncement>(() => (C2L_GetAnnouncement)MessagePool.Instance.Fetch(typeof(C2L_GetAnnouncement)));
    public static pb::MessageParser<C2L_GetAnnouncement> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_GetAnnouncement : pb::IMessage {
    private static readonly pb::MessageParser<L2C_GetAnnouncement> _parser = new pb::MessageParser<L2C_GetAnnouncement>(() => (L2C_GetAnnouncement)MessagePool.Instance.Fetch(typeof(L2C_GetAnnouncement)));
    public static pb::MessageParser<L2C_GetAnnouncement> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发起购买请求
  /// </summary>
  public partial class C2L_BuyCommodity : pb::IMessage {
    private static readonly pb::MessageParser<C2L_BuyCommodity> _parser = new pb::MessageParser<C2L_BuyCommodity>(() => (C2L_BuyCommodity)MessagePool.Instance.Fetch(typeof(C2L_BuyCommodity)));
    public static pb::MessageParser<C2L_BuyCommodity> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private long commodityId_;
    /// <summary>
    ///商品Id
    /// </summary>
    public long CommodityId {
      get { return commodityId_; }
      set {
        commodityId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (CommodityId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CommodityId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (CommodityId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CommodityId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      commodityId_ = 0;
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CommodityId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_BuyCommodity : pb::IMessage {
    private static readonly pb::MessageParser<L2C_BuyCommodity> _parser = new pb::MessageParser<L2C_BuyCommodity>(() => (L2C_BuyCommodity)MessagePool.Instance.Fetch(typeof(L2C_BuyCommodity)));
    public static pb::MessageParser<L2C_BuyCommodity> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string prepayId_ = "";
    /// <summary>
    ///只有要微信购买的时候才有值
    /// </summary>
    public string PrepayId {
      get { return prepayId_; }
      set {
        prepayId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string nonceStr_ = "";
    public string NonceStr {
      get { return nonceStr_; }
      set {
        nonceStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PrepayId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PrepayId);
      }
      if (NonceStr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NonceStr);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (PrepayId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrepayId);
      }
      if (NonceStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NonceStr);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      prepayId_ = "";
      nonceStr_ = "";
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PrepayId = input.ReadString();
            break;
          }
          case 18: {
            NonceStr = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///查询充值记录
  /// </summary>
  public partial class C2L_QueryTopUpRecord : pb::IMessage {
    private static readonly pb::MessageParser<C2L_QueryTopUpRecord> _parser = new pb::MessageParser<C2L_QueryTopUpRecord>(() => (C2L_QueryTopUpRecord)MessagePool.Instance.Fetch(typeof(C2L_QueryTopUpRecord)));
    public static pb::MessageParser<C2L_QueryTopUpRecord> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private string account_ = "";
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string password_ = "";
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long queryUserId_;
    public long QueryUserId {
      get { return queryUserId_; }
      set {
        queryUserId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (QueryUserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(QueryUserId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(234, 5);
        output.WriteString(Password);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Account.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (QueryUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(QueryUserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      queryUserId_ = 0;
      rpcId_ = 0;
      userId_ = 0;
      account_ = "";
      password_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            QueryUserId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
          case 738: {
            Account = input.ReadString();
            break;
          }
          case 746: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_QueryTopUpRecord : pb::IMessage {
    private static readonly pb::MessageParser<L2C_QueryTopUpRecord> _parser = new pb::MessageParser<L2C_QueryTopUpRecord>(() => (L2C_QueryTopUpRecord)MessagePool.Instance.Fetch(typeof(L2C_QueryTopUpRecord)));
    public static pb::MessageParser<L2C_QueryTopUpRecord> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.TopUpRecord> _repeated_topUpRecords_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.TopUpRecord.Parser);
    private pbc::RepeatedField<global::ETHotfix.TopUpRecord> topUpRecords_ = new pbc::RepeatedField<global::ETHotfix.TopUpRecord>();
    /// <summary>
    ///充值记录
    /// </summary>
    public pbc::RepeatedField<global::ETHotfix.TopUpRecord> TopUpRecords {
      get { return topUpRecords_; }
      set { topUpRecords_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      topUpRecords_.WriteTo(output, _repeated_topUpRecords_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += topUpRecords_.CalculateSize(_repeated_topUpRecords_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < topUpRecords_.Count; i++) { MessagePool.Instance.Recycle(topUpRecords_[i]); }
      topUpRecords_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            topUpRecords_.AddEntriesFrom(input, _repeated_topUpRecords_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///充值补单
  /// </summary>
  public partial class C2L_TopUpRepairOrder : pb::IMessage {
    private static readonly pb::MessageParser<C2L_TopUpRepairOrder> _parser = new pb::MessageParser<C2L_TopUpRepairOrder>(() => (C2L_TopUpRepairOrder)MessagePool.Instance.Fetch(typeof(C2L_TopUpRepairOrder)));
    public static pb::MessageParser<C2L_TopUpRepairOrder> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private string account_ = "";
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string password_ = "";
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string orderId_ = "";
    /// <summary>
    ///订单id
    /// </summary>
    public string OrderId {
      get { return orderId_; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (OrderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OrderId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(234, 5);
        output.WriteString(Password);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Account.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (OrderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      orderId_ = "";
      rpcId_ = 0;
      userId_ = 0;
      account_ = "";
      password_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            OrderId = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
          case 738: {
            Account = input.ReadString();
            break;
          }
          case 746: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_TopUpRepairOrder : pb::IMessage {
    private static readonly pb::MessageParser<L2C_TopUpRepairOrder> _parser = new pb::MessageParser<L2C_TopUpRepairOrder>(() => (L2C_TopUpRepairOrder)MessagePool.Instance.Fetch(typeof(L2C_TopUpRepairOrder)));
    public static pb::MessageParser<L2C_TopUpRepairOrder> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///单次充值信息
  /// </summary>
  public partial class TopUpRecord : pb::IMessage {
    private static readonly pb::MessageParser<TopUpRecord> _parser = new pb::MessageParser<TopUpRecord>(() => (TopUpRecord)MessagePool.Instance.Fetch(typeof(TopUpRecord)));
    public static pb::MessageParser<TopUpRecord> Parser { get { return _parser; } }

    private string orderId_ = "";
    /// <summary>
    ///订单id 商户内部订单id
    /// </summary>
    public string OrderId {
      get { return orderId_; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long topUpUserId_;
    /// <summary>
    ///玩家id
    /// </summary>
    public long TopUpUserId {
      get { return topUpUserId_; }
      set {
        topUpUserId_ = value;
      }
    }

    private int money_;
    /// <summary>
    ///金额
    /// </summary>
    public int Money {
      get { return money_; }
      set {
        money_ = value;
      }
    }

    private long goodsId_;
    /// <summary>
    ///物品id
    /// </summary>
    public long GoodsId {
      get { return goodsId_; }
      set {
        goodsId_ = value;
      }
    }

    private int goodsAmount_;
    /// <summary>
    ///物品数量
    /// </summary>
    public int GoodsAmount {
      get { return goodsAmount_; }
      set {
        goodsAmount_ = value;
      }
    }

    private int topUpState_;
    /// <summary>
    ///充值状态
    /// </summary>
    public int TopUpState {
      get { return topUpState_; }
      set {
        topUpState_ = value;
      }
    }

    private long time_;
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (OrderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OrderId);
      }
      if (TopUpUserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TopUpUserId);
      }
      if (Money != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Money);
      }
      if (GoodsId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(GoodsId);
      }
      if (GoodsAmount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(GoodsAmount);
      }
      if (TopUpState != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TopUpState);
      }
      if (Time != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Time);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (OrderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      if (TopUpUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TopUpUserId);
      }
      if (Money != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Money);
      }
      if (GoodsId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GoodsId);
      }
      if (GoodsAmount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoodsAmount);
      }
      if (TopUpState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TopUpState);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      orderId_ = "";
      topUpUserId_ = 0;
      money_ = 0;
      goodsId_ = 0;
      goodsAmount_ = 0;
      topUpState_ = 0;
      time_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            OrderId = input.ReadString();
            break;
          }
          case 16: {
            TopUpUserId = input.ReadInt64();
            break;
          }
          case 24: {
            Money = input.ReadInt32();
            break;
          }
          case 32: {
            GoodsId = input.ReadInt64();
            break;
          }
          case 40: {
            GoodsAmount = input.ReadInt32();
            break;
          }
          case 48: {
            TopUpState = input.ReadInt32();
            break;
          }
          case 56: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///向大厅服请求商品数据
  /// </summary>
  public partial class C2L_GetCommodityList : pb::IMessage {
    private static readonly pb::MessageParser<C2L_GetCommodityList> _parser = new pb::MessageParser<C2L_GetCommodityList>(() => (C2L_GetCommodityList)MessagePool.Instance.Fetch(typeof(C2L_GetCommodityList)));
    public static pb::MessageParser<C2L_GetCommodityList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_GetCommodityList : pb::IMessage {
    private static readonly pb::MessageParser<L2C_GetCommodityList> _parser = new pb::MessageParser<L2C_GetCommodityList>(() => (L2C_GetCommodityList)MessagePool.Instance.Fetch(typeof(L2C_GetCommodityList)));
    public static pb::MessageParser<L2C_GetCommodityList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.Commodity> _repeated_beansList_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.Commodity.Parser);
    private pbc::RepeatedField<global::ETHotfix.Commodity> beansList_ = new pbc::RepeatedField<global::ETHotfix.Commodity>();
    public pbc::RepeatedField<global::ETHotfix.Commodity> BeansList {
      get { return beansList_; }
      set { beansList_ = value; }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.Commodity> _repeated_jewelList_codec
        = pb::FieldCodec.ForMessage(18, global::ETHotfix.Commodity.Parser);
    private pbc::RepeatedField<global::ETHotfix.Commodity> jewelList_ = new pbc::RepeatedField<global::ETHotfix.Commodity>();
    public pbc::RepeatedField<global::ETHotfix.Commodity> JewelList {
      get { return jewelList_; }
      set { jewelList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      beansList_.WriteTo(output, _repeated_beansList_codec);
      jewelList_.WriteTo(output, _repeated_jewelList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += beansList_.CalculateSize(_repeated_beansList_codec);
      size += jewelList_.CalculateSize(_repeated_jewelList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < beansList_.Count; i++) { MessagePool.Instance.Recycle(beansList_[i]); }
      beansList_.Clear();
      for (int i = 0; i < jewelList_.Count; i++) { MessagePool.Instance.Recycle(jewelList_[i]); }
      jewelList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            beansList_.AddEntriesFrom(input, _repeated_beansList_codec);
            break;
          }
          case 18: {
            jewelList_.AddEntriesFrom(input, _repeated_jewelList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///向大厅服请求每次首次分享成功可以活动的钻石数量
  /// </summary>
  public partial class C2L_GetTheFirstShareAward : pb::IMessage {
    private static readonly pb::MessageParser<C2L_GetTheFirstShareAward> _parser = new pb::MessageParser<C2L_GetTheFirstShareAward>(() => (C2L_GetTheFirstShareAward)MessagePool.Instance.Fetch(typeof(C2L_GetTheFirstShareAward)));
    public static pb::MessageParser<C2L_GetTheFirstShareAward> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_GetTheFirstShareAward : pb::IMessage {
    private static readonly pb::MessageParser<L2C_GetTheFirstShareAward> _parser = new pb::MessageParser<L2C_GetTheFirstShareAward>(() => (L2C_GetTheFirstShareAward)MessagePool.Instance.Fetch(typeof(L2C_GetTheFirstShareAward)));
    public static pb::MessageParser<L2C_GetTheFirstShareAward> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int jeweleAmount_;
    /// <summary>
    ///钻石数量
    /// </summary>
    public int JeweleAmount {
      get { return jeweleAmount_; }
      set {
        jeweleAmount_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (JeweleAmount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(JeweleAmount);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (JeweleAmount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JeweleAmount);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      jeweleAmount_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            JeweleAmount = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///每日分享朋友圈成功 领取奖励
  /// </summary>
  public partial class C2L_GetEverydayShareAward : pb::IMessage {
    private static readonly pb::MessageParser<C2L_GetEverydayShareAward> _parser = new pb::MessageParser<C2L_GetEverydayShareAward>(() => (C2L_GetEverydayShareAward)MessagePool.Instance.Fetch(typeof(C2L_GetEverydayShareAward)));
    public static pb::MessageParser<C2L_GetEverydayShareAward> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_GetEverydayShareAward : pb::IMessage {
    private static readonly pb::MessageParser<L2C_GetEverydayShareAward> _parser = new pb::MessageParser<L2C_GetEverydayShareAward>(() => (L2C_GetEverydayShareAward)MessagePool.Instance.Fetch(typeof(L2C_GetEverydayShareAward)));
    public static pb::MessageParser<L2C_GetEverydayShareAward> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///客户端向大厅服请求签到奖励列表
  /// </summary>
  public partial class C2L_GetSignInAwardList : pb::IMessage {
    private static readonly pb::MessageParser<C2L_GetSignInAwardList> _parser = new pb::MessageParser<C2L_GetSignInAwardList>(() => (C2L_GetSignInAwardList)MessagePool.Instance.Fetch(typeof(C2L_GetSignInAwardList)));
    public static pb::MessageParser<C2L_GetSignInAwardList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_GetSignInAwardList : pb::IMessage {
    private static readonly pb::MessageParser<L2C_GetSignInAwardList> _parser = new pb::MessageParser<L2C_GetSignInAwardList>(() => (L2C_GetSignInAwardList)MessagePool.Instance.Fetch(typeof(L2C_GetSignInAwardList)));
    public static pb::MessageParser<L2C_GetSignInAwardList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.SignInAward> _repeated_signInAwardList_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.SignInAward.Parser);
    private pbc::RepeatedField<global::ETHotfix.SignInAward> signInAwardList_ = new pbc::RepeatedField<global::ETHotfix.SignInAward>();
    /// <summary>
    ///签到奖励列表
    /// </summary>
    public pbc::RepeatedField<global::ETHotfix.SignInAward> SignInAwardList {
      get { return signInAwardList_; }
      set { signInAwardList_ = value; }
    }

    private global::ETHotfix.UserSingInState userSinginInfo_;
    /// <summary>
    ///当前用户签到信息
    /// </summary>
    public global::ETHotfix.UserSingInState UserSinginInfo {
      get { return userSinginInfo_; }
      set {
        userSinginInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      signInAwardList_.WriteTo(output, _repeated_signInAwardList_codec);
      if (userSinginInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserSinginInfo);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += signInAwardList_.CalculateSize(_repeated_signInAwardList_codec);
      if (userSinginInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserSinginInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < signInAwardList_.Count; i++) { MessagePool.Instance.Recycle(signInAwardList_[i]); }
      signInAwardList_.Clear();
      if (userSinginInfo_ != null) MessagePool.Instance.Recycle(userSinginInfo_); userSinginInfo_ = null;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            signInAwardList_.AddEntriesFrom(input, _repeated_signInAwardList_codec);
            break;
          }
          case 18: {
            if (userSinginInfo_ == null) {
              userSinginInfo_ = new global::ETHotfix.UserSingInState();
            }
            input.ReadMessage(userSinginInfo_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///客户端向大厅服请求今日签到
  /// </summary>
  public partial class C2L_TodaySignIn : pb::IMessage {
    private static readonly pb::MessageParser<C2L_TodaySignIn> _parser = new pb::MessageParser<C2L_TodaySignIn>(() => (C2L_TodaySignIn)MessagePool.Instance.Fetch(typeof(C2L_TodaySignIn)));
    public static pb::MessageParser<C2L_TodaySignIn> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_TodaySignIn : pb::IMessage {
    private static readonly pb::MessageParser<L2C_TodaySignIn> _parser = new pb::MessageParser<L2C_TodaySignIn>(() => (L2C_TodaySignIn)MessagePool.Instance.Fetch(typeof(L2C_TodaySignIn)));
    public static pb::MessageParser<L2C_TodaySignIn> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求游戏匹配房间配置
  /// </summary>
  public partial class C2L_GetMatchRoomConfigs : pb::IMessage {
    private static readonly pb::MessageParser<C2L_GetMatchRoomConfigs> _parser = new pb::MessageParser<C2L_GetMatchRoomConfigs>(() => (C2L_GetMatchRoomConfigs)MessagePool.Instance.Fetch(typeof(C2L_GetMatchRoomConfigs)));
    public static pb::MessageParser<C2L_GetMatchRoomConfigs> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private long gameEntryId_;
    public long GameEntryId {
      get { return gameEntryId_; }
      set {
        gameEntryId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (GameEntryId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(GameEntryId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (GameEntryId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GameEntryId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      gameEntryId_ = 0;
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameEntryId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_GetMatchRoomConfigs : pb::IMessage {
    private static readonly pb::MessageParser<L2C_GetMatchRoomConfigs> _parser = new pb::MessageParser<L2C_GetMatchRoomConfigs>(() => (L2C_GetMatchRoomConfigs)MessagePool.Instance.Fetch(typeof(L2C_GetMatchRoomConfigs)));
    public static pb::MessageParser<L2C_GetMatchRoomConfigs> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.MatchRoomConfig> _repeated_matchRoomConfigs_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.MatchRoomConfig.Parser);
    private pbc::RepeatedField<global::ETHotfix.MatchRoomConfig> matchRoomConfigs_ = new pbc::RepeatedField<global::ETHotfix.MatchRoomConfig>();
    public pbc::RepeatedField<global::ETHotfix.MatchRoomConfig> MatchRoomConfigs {
      get { return matchRoomConfigs_; }
      set { matchRoomConfigs_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      matchRoomConfigs_.WriteTo(output, _repeated_matchRoomConfigs_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += matchRoomConfigs_.CalculateSize(_repeated_matchRoomConfigs_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < matchRoomConfigs_.Count; i++) { MessagePool.Instance.Recycle(matchRoomConfigs_[i]); }
      matchRoomConfigs_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            matchRoomConfigs_.AddEntriesFrom(input, _repeated_matchRoomConfigs_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求推广奖励信息
  /// </summary>
  public partial class C2L_GetGenralizeInfo : pb::IMessage {
    private static readonly pb::MessageParser<C2L_GetGenralizeInfo> _parser = new pb::MessageParser<C2L_GetGenralizeInfo>(() => (C2L_GetGenralizeInfo)MessagePool.Instance.Fetch(typeof(C2L_GetGenralizeInfo)));
    public static pb::MessageParser<C2L_GetGenralizeInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_GetGenralizeInfo : pb::IMessage {
    private static readonly pb::MessageParser<L2C_GetGenralizeInfo> _parser = new pb::MessageParser<L2C_GetGenralizeInfo>(() => (L2C_GetGenralizeInfo)MessagePool.Instance.Fetch(typeof(L2C_GetGenralizeInfo)));
    public static pb::MessageParser<L2C_GetGenralizeInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETHotfix.GeneralizeAwardInfo awardInfo_;
    /// <summary>
    ///推广奖励信息
    /// </summary>
    public global::ETHotfix.GeneralizeAwardInfo AwardInfo {
      get { return awardInfo_; }
      set {
        awardInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (awardInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AwardInfo);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (awardInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AwardInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (awardInfo_ != null) MessagePool.Instance.Recycle(awardInfo_); awardInfo_ = null;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (awardInfo_ == null) {
              awardInfo_ = new global::ETHotfix.GeneralizeAwardInfo();
            }
            input.ReadMessage(awardInfo_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///推广奖励信息
  /// </summary>
  public partial class GeneralizeAwardInfo : pb::IMessage {
    private static readonly pb::MessageParser<GeneralizeAwardInfo> _parser = new pb::MessageParser<GeneralizeAwardInfo>(() => (GeneralizeAwardInfo)MessagePool.Instance.Fetch(typeof(GeneralizeAwardInfo)));
    public static pb::MessageParser<GeneralizeAwardInfo> Parser { get { return _parser; } }

    private int generalizeNumber_;
    public int GeneralizeNumber {
      get { return generalizeNumber_; }
      set {
        generalizeNumber_ = value;
      }
    }

    private int getJewelTotalNum_;
    public int GetJewelTotalNum {
      get { return getJewelTotalNum_; }
      set {
        getJewelTotalNum_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (GeneralizeNumber != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GeneralizeNumber);
      }
      if (GetJewelTotalNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GetJewelTotalNum);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (GeneralizeNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GeneralizeNumber);
      }
      if (GetJewelTotalNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GetJewelTotalNum);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      generalizeNumber_ = 0;
      getJewelTotalNum_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GeneralizeNumber = input.ReadInt32();
            break;
          }
          case 16: {
            GetJewelTotalNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求领取新手被邀请礼包的状态
  /// </summary>
  public partial class C2L_GetGreenGiftStatu : pb::IMessage {
    private static readonly pb::MessageParser<C2L_GetGreenGiftStatu> _parser = new pb::MessageParser<C2L_GetGreenGiftStatu>(() => (C2L_GetGreenGiftStatu)MessagePool.Instance.Fetch(typeof(C2L_GetGreenGiftStatu)));
    public static pb::MessageParser<C2L_GetGreenGiftStatu> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_GetGreenGiftStatu : pb::IMessage {
    private static readonly pb::MessageParser<L2C_GetGreenGiftStatu> _parser = new pb::MessageParser<L2C_GetGreenGiftStatu>(() => (L2C_GetGreenGiftStatu)MessagePool.Instance.Fetch(typeof(L2C_GetGreenGiftStatu)));
    public static pb::MessageParser<L2C_GetGreenGiftStatu> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private bool isHaveGet_;
    /// <summary>
    ///是否领取过了
    /// </summary>
    public bool IsHaveGet {
      get { return isHaveGet_; }
      set {
        isHaveGet_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IsHaveGet != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsHaveGet);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (IsHaveGet != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      isHaveGet_ = false;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsHaveGet = input.ReadBool();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///领取新手被邀请礼包
  /// </summary>
  public partial class C2L_GetGreenGift : pb::IMessage {
    private static readonly pb::MessageParser<C2L_GetGreenGift> _parser = new pb::MessageParser<C2L_GetGreenGift>(() => (C2L_GetGreenGift)MessagePool.Instance.Fetch(typeof(C2L_GetGreenGift)));
    public static pb::MessageParser<C2L_GetGreenGift> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private long code_;
    /// <summary>
    ///邀请的邀请Code 一般就是UserId
    /// </summary>
    public long Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Code);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Code != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Code);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      code_ = 0;
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_GetGreenGift : pb::IMessage {
    private static readonly pb::MessageParser<L2C_GetGreenGift> _parser = new pb::MessageParser<L2C_GetGreenGift>(() => (L2C_GetGreenGift)MessagePool.Instance.Fetch(typeof(L2C_GetGreenGift)));
    public static pb::MessageParser<L2C_GetGreenGift> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取客服信息
  /// </summary>
  public partial class C2L_GetService : pb::IMessage {
    private static readonly pb::MessageParser<C2L_GetService> _parser = new pb::MessageParser<C2L_GetService>(() => (C2L_GetService)MessagePool.Instance.Fetch(typeof(C2L_GetService)));
    public static pb::MessageParser<C2L_GetService> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_GetService : pb::IMessage {
    private static readonly pb::MessageParser<L2C_GetService> _parser = new pb::MessageParser<L2C_GetService>(() => (L2C_GetService)MessagePool.Instance.Fetch(typeof(L2C_GetService)));
    public static pb::MessageParser<L2C_GetService> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.ServiceInfo> _repeated_serviceInfos_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.ServiceInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.ServiceInfo> serviceInfos_ = new pbc::RepeatedField<global::ETHotfix.ServiceInfo>();
    /// <summary>
    ///客服信息
    /// </summary>
    public pbc::RepeatedField<global::ETHotfix.ServiceInfo> ServiceInfos {
      get { return serviceInfos_; }
      set { serviceInfos_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      serviceInfos_.WriteTo(output, _repeated_serviceInfos_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += serviceInfos_.CalculateSize(_repeated_serviceInfos_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < serviceInfos_.Count; i++) { MessagePool.Instance.Recycle(serviceInfos_[i]); }
      serviceInfos_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            serviceInfos_.AddEntriesFrom(input, _repeated_serviceInfos_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class ServiceInfo : pb::IMessage {
    private static readonly pb::MessageParser<ServiceInfo> _parser = new pb::MessageParser<ServiceInfo>(() => (ServiceInfo)MessagePool.Instance.Fetch(typeof(ServiceInfo)));
    public static pb::MessageParser<ServiceInfo> Parser { get { return _parser; } }

    private string type_ = "";
    /// <summary>
    ///客服的类型VX还是QQ
    /// </summary>
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string number_ = "";
    /// <summary>
    ///客服信息的号码
    /// </summary>
    public string Number {
      get { return number_; }
      set {
        number_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (Number.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Number);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Number.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Number);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      type_ = "";
      number_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Number = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取是不是代理
  /// </summary>
  public partial class C2L_GetAgencyStatu : pb::IMessage {
    private static readonly pb::MessageParser<C2L_GetAgencyStatu> _parser = new pb::MessageParser<C2L_GetAgencyStatu>(() => (C2L_GetAgencyStatu)MessagePool.Instance.Fetch(typeof(C2L_GetAgencyStatu)));
    public static pb::MessageParser<C2L_GetAgencyStatu> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_GetAgencyStatu : pb::IMessage {
    private static readonly pb::MessageParser<L2C_GetAgencyStatu> _parser = new pb::MessageParser<L2C_GetAgencyStatu>(() => (L2C_GetAgencyStatu)MessagePool.Instance.Fetch(typeof(L2C_GetAgencyStatu)));
    public static pb::MessageParser<L2C_GetAgencyStatu> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private bool isAgency_;
    /// <summary>
    ///是不是代理
    /// </summary>
    public bool IsAgency {
      get { return isAgency_; }
      set {
        isAgency_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IsAgency != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsAgency);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (IsAgency != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      isAgency_ = false;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsAgency = input.ReadBool();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///卖出钻石
  /// </summary>
  public partial class C2L_SaleJewel : pb::IMessage {
    private static readonly pb::MessageParser<C2L_SaleJewel> _parser = new pb::MessageParser<C2L_SaleJewel>(() => (C2L_SaleJewel)MessagePool.Instance.Fetch(typeof(C2L_SaleJewel)));
    public static pb::MessageParser<C2L_SaleJewel> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private long maiJiaUser_;
    /// <summary>
    ///买的userId
    /// </summary>
    public long MaiJiaUser {
      get { return maiJiaUser_; }
      set {
        maiJiaUser_ = value;
      }
    }

    private int jewelNum_;
    /// <summary>
    ///钻石数量
    /// </summary>
    public int JewelNum {
      get { return jewelNum_; }
      set {
        jewelNum_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MaiJiaUser != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MaiJiaUser);
      }
      if (JewelNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(JewelNum);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (MaiJiaUser != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaiJiaUser);
      }
      if (JewelNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JewelNum);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      maiJiaUser_ = 0;
      jewelNum_ = 0;
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MaiJiaUser = input.ReadInt64();
            break;
          }
          case 16: {
            JewelNum = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_SaleJewel : pb::IMessage {
    private static readonly pb::MessageParser<L2C_SaleJewel> _parser = new pb::MessageParser<L2C_SaleJewel>(() => (L2C_SaleJewel)MessagePool.Instance.Fetch(typeof(L2C_SaleJewel)));
    public static pb::MessageParser<L2C_SaleJewel> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取销售记录
  /// </summary>
  public partial class C2L_GetMarketRecord : pb::IMessage {
    private static readonly pb::MessageParser<C2L_GetMarketRecord> _parser = new pb::MessageParser<C2L_GetMarketRecord>(() => (C2L_GetMarketRecord)MessagePool.Instance.Fetch(typeof(C2L_GetMarketRecord)));
    public static pb::MessageParser<C2L_GetMarketRecord> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_GetMarketRecord : pb::IMessage {
    private static readonly pb::MessageParser<L2C_GetMarketRecord> _parser = new pb::MessageParser<L2C_GetMarketRecord>(() => (L2C_GetMarketRecord)MessagePool.Instance.Fetch(typeof(L2C_GetMarketRecord)));
    public static pb::MessageParser<L2C_GetMarketRecord> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.MarketInfo> _repeated_marketInfos_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.MarketInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.MarketInfo> marketInfos_ = new pbc::RepeatedField<global::ETHotfix.MarketInfo>();
    /// <summary>
    ///销售记录信息
    /// </summary>
    public pbc::RepeatedField<global::ETHotfix.MarketInfo> MarketInfos {
      get { return marketInfos_; }
      set { marketInfos_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      marketInfos_.WriteTo(output, _repeated_marketInfos_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += marketInfos_.CalculateSize(_repeated_marketInfos_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < marketInfos_.Count; i++) { MessagePool.Instance.Recycle(marketInfos_[i]); }
      marketInfos_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            marketInfos_.AddEntriesFrom(input, _repeated_marketInfos_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///单个销售信息
  /// </summary>
  public partial class MarketInfo : pb::IMessage {
    private static readonly pb::MessageParser<MarketInfo> _parser = new pb::MessageParser<MarketInfo>(() => (MarketInfo)MessagePool.Instance.Fetch(typeof(MarketInfo)));
    public static pb::MessageParser<MarketInfo> Parser { get { return _parser; } }

    private long time_;
    /// <summary>
    ///销售时间
    /// </summary>
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    private long maiJiaUserId_;
    /// <summary>
    ///买家的UserId
    /// </summary>
    public long MaiJiaUserId {
      get { return maiJiaUserId_; }
      set {
        maiJiaUserId_ = value;
      }
    }

    private string maiJiaName_ = "";
    /// <summary>
    ///买家的名字
    /// </summary>
    public string MaiJiaName {
      get { return maiJiaName_; }
      set {
        maiJiaName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int jewelNum_;
    /// <summary>
    ///卖出的钻石数量
    /// </summary>
    public int JewelNum {
      get { return jewelNum_; }
      set {
        jewelNum_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Time);
      }
      if (MaiJiaUserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MaiJiaUserId);
      }
      if (MaiJiaName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MaiJiaName);
      }
      if (JewelNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(JewelNum);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (MaiJiaUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaiJiaUserId);
      }
      if (MaiJiaName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MaiJiaName);
      }
      if (JewelNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JewelNum);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      time_ = 0;
      maiJiaUserId_ = 0;
      maiJiaName_ = "";
      jewelNum_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Time = input.ReadInt64();
            break;
          }
          case 16: {
            MaiJiaUserId = input.ReadInt64();
            break;
          }
          case 26: {
            MaiJiaName = input.ReadString();
            break;
          }
          case 32: {
            JewelNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求转盘抽奖
  /// </summary>
  public partial class C2L_TurntableDrawLottery : pb::IMessage {
    private static readonly pb::MessageParser<C2L_TurntableDrawLottery> _parser = new pb::MessageParser<C2L_TurntableDrawLottery>(() => (C2L_TurntableDrawLottery)MessagePool.Instance.Fetch(typeof(C2L_TurntableDrawLottery)));
    public static pb::MessageParser<C2L_TurntableDrawLottery> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_TurntableDrawLottery : pb::IMessage {
    private static readonly pb::MessageParser<L2C_TurntableDrawLottery> _parser = new pb::MessageParser<L2C_TurntableDrawLottery>(() => (L2C_TurntableDrawLottery)MessagePool.Instance.Fetch(typeof(L2C_TurntableDrawLottery)));
    public static pb::MessageParser<L2C_TurntableDrawLottery> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int turntableGoodsId_;
    /// <summary>
    ///中将的物品ID
    /// </summary>
    public int TurntableGoodsId {
      get { return turntableGoodsId_; }
      set {
        turntableGoodsId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (TurntableGoodsId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TurntableGoodsId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (TurntableGoodsId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TurntableGoodsId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      turntableGoodsId_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TurntableGoodsId = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取转盘抽奖物品列表
  /// </summary>
  public partial class C2L_GetTurntableGoodss : pb::IMessage {
    private static readonly pb::MessageParser<C2L_GetTurntableGoodss> _parser = new pb::MessageParser<C2L_GetTurntableGoodss>(() => (C2L_GetTurntableGoodss)MessagePool.Instance.Fetch(typeof(C2L_GetTurntableGoodss)));
    public static pb::MessageParser<C2L_GetTurntableGoodss> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_GetTurntableGoodss : pb::IMessage {
    private static readonly pb::MessageParser<L2C_GetTurntableGoodss> _parser = new pb::MessageParser<L2C_GetTurntableGoodss>(() => (L2C_GetTurntableGoodss)MessagePool.Instance.Fetch(typeof(L2C_GetTurntableGoodss)));
    public static pb::MessageParser<L2C_GetTurntableGoodss> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.TurntableGoods> _repeated_goodss_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.TurntableGoods.Parser);
    private pbc::RepeatedField<global::ETHotfix.TurntableGoods> goodss_ = new pbc::RepeatedField<global::ETHotfix.TurntableGoods>();
    /// <summary>
    ///抽奖物品列表
    /// </summary>
    public pbc::RepeatedField<global::ETHotfix.TurntableGoods> Goodss {
      get { return goodss_; }
      set { goodss_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      goodss_.WriteTo(output, _repeated_goodss_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += goodss_.CalculateSize(_repeated_goodss_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < goodss_.Count; i++) { MessagePool.Instance.Recycle(goodss_[i]); }
      goodss_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            goodss_.AddEntriesFrom(input, _repeated_goodss_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///抽奖物品
  /// </summary>
  public partial class TurntableGoods : pb::IMessage {
    private static readonly pb::MessageParser<TurntableGoods> _parser = new pb::MessageParser<TurntableGoods>(() => (TurntableGoods)MessagePool.Instance.Fetch(typeof(TurntableGoods)));
    public static pb::MessageParser<TurntableGoods> Parser { get { return _parser; } }

    private int turntableGoodsId_;
    /// <summary>
    ///奖品ID
    /// </summary>
    public int TurntableGoodsId {
      get { return turntableGoodsId_; }
      set {
        turntableGoodsId_ = value;
      }
    }

    private long goodsId_;
    /// <summary>
    ///物品的ID
    /// </summary>
    public long GoodsId {
      get { return goodsId_; }
      set {
        goodsId_ = value;
      }
    }

    private int amount_;
    /// <summary>
    ///物品的数量
    /// </summary>
    public int Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    private int probability_;
    /// <summary>
    ///抽奖的概率
    /// </summary>
    public int Probability {
      get { return probability_; }
      set {
        probability_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (TurntableGoodsId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TurntableGoodsId);
      }
      if (GoodsId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(GoodsId);
      }
      if (Amount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Amount);
      }
      if (Probability != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Probability);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (TurntableGoodsId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TurntableGoodsId);
      }
      if (GoodsId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GoodsId);
      }
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
      }
      if (Probability != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Probability);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      turntableGoodsId_ = 0;
      goodsId_ = 0;
      amount_ = 0;
      probability_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TurntableGoodsId = input.ReadInt32();
            break;
          }
          case 16: {
            GoodsId = input.ReadInt64();
            break;
          }
          case 24: {
            Amount = input.ReadInt32();
            break;
          }
          case 32: {
            Probability = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取可以免费抽奖的次数
  /// </summary>
  public partial class C2L_GetFreeDrawLotteryCount : pb::IMessage {
    private static readonly pb::MessageParser<C2L_GetFreeDrawLotteryCount> _parser = new pb::MessageParser<C2L_GetFreeDrawLotteryCount>(() => (C2L_GetFreeDrawLotteryCount)MessagePool.Instance.Fetch(typeof(C2L_GetFreeDrawLotteryCount)));
    public static pb::MessageParser<C2L_GetFreeDrawLotteryCount> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_GetFreeDrawLotteryCount : pb::IMessage {
    private static readonly pb::MessageParser<L2C_GetFreeDrawLotteryCount> _parser = new pb::MessageParser<L2C_GetFreeDrawLotteryCount>(() => (L2C_GetFreeDrawLotteryCount)MessagePool.Instance.Fetch(typeof(L2C_GetFreeDrawLotteryCount)));
    public static pb::MessageParser<L2C_GetFreeDrawLotteryCount> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int count_;
    /// <summary>
    ///抽奖次数
    /// </summary>
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      count_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取抽奖记录
  /// </summary>
  public partial class C2L_GetWinPrizeRecord : pb::IMessage {
    private static readonly pb::MessageParser<C2L_GetWinPrizeRecord> _parser = new pb::MessageParser<C2L_GetWinPrizeRecord>(() => (C2L_GetWinPrizeRecord)MessagePool.Instance.Fetch(typeof(C2L_GetWinPrizeRecord)));
    public static pb::MessageParser<C2L_GetWinPrizeRecord> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_GetWinPrizeRecord : pb::IMessage {
    private static readonly pb::MessageParser<L2C_GetWinPrizeRecord> _parser = new pb::MessageParser<L2C_GetWinPrizeRecord>(() => (L2C_GetWinPrizeRecord)MessagePool.Instance.Fetch(typeof(L2C_GetWinPrizeRecord)));
    public static pb::MessageParser<L2C_GetWinPrizeRecord> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.WinPrizeRecord> _repeated_records_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.WinPrizeRecord.Parser);
    private pbc::RepeatedField<global::ETHotfix.WinPrizeRecord> records_ = new pbc::RepeatedField<global::ETHotfix.WinPrizeRecord>();
    /// <summary>
    ///全部中奖记录
    /// </summary>
    public pbc::RepeatedField<global::ETHotfix.WinPrizeRecord> Records {
      get { return records_; }
      set { records_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      records_.WriteTo(output, _repeated_records_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += records_.CalculateSize(_repeated_records_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < records_.Count; i++) { MessagePool.Instance.Recycle(records_[i]); }
      records_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            records_.AddEntriesFrom(input, _repeated_records_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class WinPrizeRecord : pb::IMessage {
    private static readonly pb::MessageParser<WinPrizeRecord> _parser = new pb::MessageParser<WinPrizeRecord>(() => (WinPrizeRecord)MessagePool.Instance.Fetch(typeof(WinPrizeRecord)));
    public static pb::MessageParser<WinPrizeRecord> Parser { get { return _parser; } }

    private int winPrizeId_;
    /// <summary>
    ///中奖记录Id
    /// </summary>
    public int WinPrizeId {
      get { return winPrizeId_; }
      set {
        winPrizeId_ = value;
      }
    }

    private long userId_;
    /// <summary>
    ///中奖人的UserId
    /// </summary>
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private long time_;
    /// <summary>
    ///中奖时间
    /// </summary>
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    private long goodsId_;
    /// <summary>
    ///物品的ID
    /// </summary>
    public long GoodsId {
      get { return goodsId_; }
      set {
        goodsId_ = value;
      }
    }

    private int amount_;
    /// <summary>
    ///物品数量
    /// </summary>
    public int Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    private int type_;
    /// <summary>
    ///兑奖状态 0是未兑奖 其他是已兑奖
    /// </summary>
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private string remark_ = "";
    /// <summary>
    ///备注
    /// </summary>
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (WinPrizeId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WinPrizeId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserId);
      }
      if (Time != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Time);
      }
      if (GoodsId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(GoodsId);
      }
      if (Amount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Amount);
      }
      if (Type != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Type);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Remark);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (WinPrizeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinPrizeId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (GoodsId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GoodsId);
      }
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      winPrizeId_ = 0;
      userId_ = 0;
      time_ = 0;
      goodsId_ = 0;
      amount_ = 0;
      type_ = 0;
      remark_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            WinPrizeId = input.ReadInt32();
            break;
          }
          case 16: {
            UserId = input.ReadInt64();
            break;
          }
          case 24: {
            Time = input.ReadInt64();
            break;
          }
          case 32: {
            GoodsId = input.ReadInt64();
            break;
          }
          case 40: {
            Amount = input.ReadInt32();
            break;
          }
          case 48: {
            Type = input.ReadInt32();
            break;
          }
          case 58: {
            Remark = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///查询大局战绩
  /// </summary>
  public partial class C2L_GetPlayerMiltary : pb::IMessage {
    private static readonly pb::MessageParser<C2L_GetPlayerMiltary> _parser = new pb::MessageParser<C2L_GetPlayerMiltary>(() => (C2L_GetPlayerMiltary)MessagePool.Instance.Fetch(typeof(C2L_GetPlayerMiltary)));
    public static pb::MessageParser<C2L_GetPlayerMiltary> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private long queryUserId_;
    /// <summary>
    ///查询玩家的UserId
    /// </summary>
    public long QueryUserId {
      get { return queryUserId_; }
      set {
        queryUserId_ = value;
      }
    }

    private int friendCircleId_;
    /// <summary>
    ///所属的亲友圈ID
    /// </summary>
    public int FriendCircleId {
      get { return friendCircleId_; }
      set {
        friendCircleId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (QueryUserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(QueryUserId);
      }
      if (FriendCircleId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FriendCircleId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (QueryUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(QueryUserId);
      }
      if (FriendCircleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendCircleId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      queryUserId_ = 0;
      friendCircleId_ = 0;
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            QueryUserId = input.ReadInt64();
            break;
          }
          case 16: {
            FriendCircleId = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_GetPlayerMiltary : pb::IMessage {
    private static readonly pb::MessageParser<L2C_GetPlayerMiltary> _parser = new pb::MessageParser<L2C_GetPlayerMiltary>(() => (L2C_GetPlayerMiltary)MessagePool.Instance.Fetch(typeof(L2C_GetPlayerMiltary)));
    public static pb::MessageParser<L2C_GetPlayerMiltary> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.Miltary> _repeated_miltarys_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.Miltary.Parser);
    private pbc::RepeatedField<global::ETHotfix.Miltary> miltarys_ = new pbc::RepeatedField<global::ETHotfix.Miltary>();
    /// <summary>
    ///全部大局战绩
    /// </summary>
    public pbc::RepeatedField<global::ETHotfix.Miltary> Miltarys {
      get { return miltarys_; }
      set { miltarys_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      miltarys_.WriteTo(output, _repeated_miltarys_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += miltarys_.CalculateSize(_repeated_miltarys_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < miltarys_.Count; i++) { MessagePool.Instance.Recycle(miltarys_[i]); }
      miltarys_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            miltarys_.AddEntriesFrom(input, _repeated_miltarys_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///大局战绩信息
  /// </summary>
  public partial class Miltary : pb::IMessage {
    private static readonly pb::MessageParser<Miltary> _parser = new pb::MessageParser<Miltary>(() => (Miltary)MessagePool.Instance.Fetch(typeof(Miltary)));
    public static pb::MessageParser<Miltary> Parser { get { return _parser; } }

    private int miltaryId_;
    /// <summary>
    ///录像Id 对应小局的小局信息的录像id
    /// </summary>
    public int MiltaryId {
      get { return miltaryId_; }
      set {
        miltaryId_ = value;
      }
    }

    private int roomNumber_;
    /// <summary>
    ///房号
    /// </summary>
    public int RoomNumber {
      get { return roomNumber_; }
      set {
        roomNumber_ = value;
      }
    }

    private int friendCircleId_;
    /// <summary>
    ///所属的亲友圈ID 0就是 正常房卡打牌 不在亲友圈里面
    /// </summary>
    public int FriendCircleId {
      get { return friendCircleId_; }
      set {
        friendCircleId_ = value;
      }
    }

    private long gameEntryId_;
    /// <summary>
    ///所属游戏ID
    /// </summary>
    public long GameEntryId {
      get { return gameEntryId_; }
      set {
        gameEntryId_ = value;
      }
    }

    private long time_;
    /// <summary>
    ///战绩时间
    /// </summary>
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.MiltaryPlayerInfo> _repeated_playerInofs_codec
        = pb::FieldCodec.ForMessage(50, global::ETHotfix.MiltaryPlayerInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.MiltaryPlayerInfo> playerInofs_ = new pbc::RepeatedField<global::ETHotfix.MiltaryPlayerInfo>();
    /// <summary>
    ///玩家信息
    /// </summary>
    public pbc::RepeatedField<global::ETHotfix.MiltaryPlayerInfo> PlayerInofs {
      get { return playerInofs_; }
      set { playerInofs_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MiltaryId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MiltaryId);
      }
      if (RoomNumber != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomNumber);
      }
      if (FriendCircleId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FriendCircleId);
      }
      if (GameEntryId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(GameEntryId);
      }
      if (Time != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Time);
      }
      playerInofs_.WriteTo(output, _repeated_playerInofs_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (MiltaryId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MiltaryId);
      }
      if (RoomNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomNumber);
      }
      if (FriendCircleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendCircleId);
      }
      if (GameEntryId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GameEntryId);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      size += playerInofs_.CalculateSize(_repeated_playerInofs_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      miltaryId_ = 0;
      roomNumber_ = 0;
      friendCircleId_ = 0;
      gameEntryId_ = 0;
      time_ = 0;
      for (int i = 0; i < playerInofs_.Count; i++) { MessagePool.Instance.Recycle(playerInofs_[i]); }
      playerInofs_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MiltaryId = input.ReadInt32();
            break;
          }
          case 16: {
            RoomNumber = input.ReadInt32();
            break;
          }
          case 24: {
            FriendCircleId = input.ReadInt32();
            break;
          }
          case 32: {
            GameEntryId = input.ReadInt64();
            break;
          }
          case 40: {
            Time = input.ReadInt64();
            break;
          }
          case 50: {
            playerInofs_.AddEntriesFrom(input, _repeated_playerInofs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///大局玩家信息
  /// </summary>
  public partial class MiltaryPlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<MiltaryPlayerInfo> _parser = new pb::MessageParser<MiltaryPlayerInfo>(() => (MiltaryPlayerInfo)MessagePool.Instance.Fetch(typeof(MiltaryPlayerInfo)));
    public static pb::MessageParser<MiltaryPlayerInfo> Parser { get { return _parser; } }

    private string name_ = "";
    /// <summary>
    ///名字
    /// </summary>
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int totalScore_;
    /// <summary>
    ///总分
    /// </summary>
    public int TotalScore {
      get { return totalScore_; }
      set {
        totalScore_ = value;
      }
    }

    private long userId_;
    /// <summary>
    ///用户id
    /// </summary>
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (TotalScore != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalScore);
      }
      if (UserId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (TotalScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalScore);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      name_ = "";
      totalScore_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            TotalScore = input.ReadInt32();
            break;
          }
          case 24: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///查询大局里面的所有小局战绩
  /// </summary>
  public partial class C2L_GetMiltarySmallInfo : pb::IMessage {
    private static readonly pb::MessageParser<C2L_GetMiltarySmallInfo> _parser = new pb::MessageParser<C2L_GetMiltarySmallInfo>(() => (C2L_GetMiltarySmallInfo)MessagePool.Instance.Fetch(typeof(C2L_GetMiltarySmallInfo)));
    public static pb::MessageParser<C2L_GetMiltarySmallInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private int miltaryId_;
    /// <summary>
    ///所对应的大局战绩ID
    /// </summary>
    public int MiltaryId {
      get { return miltaryId_; }
      set {
        miltaryId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MiltaryId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MiltaryId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (MiltaryId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MiltaryId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      miltaryId_ = 0;
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MiltaryId = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_GetMiltarySmallInfo : pb::IMessage {
    private static readonly pb::MessageParser<L2C_GetMiltarySmallInfo> _parser = new pb::MessageParser<L2C_GetMiltarySmallInfo>(() => (L2C_GetMiltarySmallInfo)MessagePool.Instance.Fetch(typeof(L2C_GetMiltarySmallInfo)));
    public static pb::MessageParser<L2C_GetMiltarySmallInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETHotfix.MiltarySmallInfo miltarySmallAllInfo_;
    /// <summary>
    ///所有小局信息
    /// </summary>
    public global::ETHotfix.MiltarySmallInfo MiltarySmallAllInfo {
      get { return miltarySmallAllInfo_; }
      set {
        miltarySmallAllInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (miltarySmallAllInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MiltarySmallAllInfo);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (miltarySmallAllInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MiltarySmallAllInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (miltarySmallAllInfo_ != null) MessagePool.Instance.Recycle(miltarySmallAllInfo_); miltarySmallAllInfo_ = null;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            if (miltarySmallAllInfo_ == null) {
              miltarySmallAllInfo_ = new global::ETHotfix.MiltarySmallInfo();
            }
            input.ReadMessage(miltarySmallAllInfo_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///详细战绩信息
  /// </summary>
  public partial class MiltarySmallInfo : pb::IMessage {
    private static readonly pb::MessageParser<MiltarySmallInfo> _parser = new pb::MessageParser<MiltarySmallInfo>(() => (MiltarySmallInfo)MessagePool.Instance.Fetch(typeof(MiltarySmallInfo)));
    public static pb::MessageParser<MiltarySmallInfo> Parser { get { return _parser; } }

    private int miltaryId_;
    public int MiltaryId {
      get { return miltaryId_; }
      set {
        miltaryId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.ParticularMiltary> _repeated_particularMiltarys_codec
        = pb::FieldCodec.ForMessage(18, global::ETHotfix.ParticularMiltary.Parser);
    private pbc::RepeatedField<global::ETHotfix.ParticularMiltary> particularMiltarys_ = new pbc::RepeatedField<global::ETHotfix.ParticularMiltary>();
    /// <summary>
    ///所有小局信息
    /// </summary>
    public pbc::RepeatedField<global::ETHotfix.ParticularMiltary> ParticularMiltarys {
      get { return particularMiltarys_; }
      set { particularMiltarys_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MiltaryId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MiltaryId);
      }
      particularMiltarys_.WriteTo(output, _repeated_particularMiltarys_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (MiltaryId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MiltaryId);
      }
      size += particularMiltarys_.CalculateSize(_repeated_particularMiltarys_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      miltaryId_ = 0;
      for (int i = 0; i < particularMiltarys_.Count; i++) { MessagePool.Instance.Recycle(particularMiltarys_[i]); }
      particularMiltarys_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MiltaryId = input.ReadInt32();
            break;
          }
          case 18: {
            particularMiltarys_.AddEntriesFrom(input, _repeated_particularMiltarys_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///详细战绩里面没小局信息
  /// </summary>
  public partial class ParticularMiltary : pb::IMessage {
    private static readonly pb::MessageParser<ParticularMiltary> _parser = new pb::MessageParser<ParticularMiltary>(() => (ParticularMiltary)MessagePool.Instance.Fetch(typeof(ParticularMiltary)));
    public static pb::MessageParser<ParticularMiltary> Parser { get { return _parser; } }

    private int dataId_;
    /// <summary>
    ///对应的录像战绩数据Id
    /// </summary>
    public int DataId {
      get { return dataId_; }
      set {
        dataId_ = value;
      }
    }

    private long time_;
    /// <summary>
    ///对局时间
    /// </summary>
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_getScoreInfos_codec
        = pb::FieldCodec.ForInt32(26);
    private pbc::RepeatedField<int> getScoreInfos_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///得分信息
    /// </summary>
    public pbc::RepeatedField<int> GetScoreInfos {
      get { return getScoreInfos_; }
      set { getScoreInfos_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (DataId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DataId);
      }
      if (Time != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Time);
      }
      getScoreInfos_.WriteTo(output, _repeated_getScoreInfos_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (DataId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataId);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      size += getScoreInfos_.CalculateSize(_repeated_getScoreInfos_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      dataId_ = 0;
      time_ = 0;
      getScoreInfos_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DataId = input.ReadInt32();
            break;
          }
          case 16: {
            Time = input.ReadInt64();
            break;
          }
          case 26:
          case 24: {
            getScoreInfos_.AddEntriesFrom(input, _repeated_getScoreInfos_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///查询录像数据
  /// </summary>
  public partial class C2L_GetMiltaryRecordDataInfo : pb::IMessage {
    private static readonly pb::MessageParser<C2L_GetMiltaryRecordDataInfo> _parser = new pb::MessageParser<C2L_GetMiltaryRecordDataInfo>(() => (C2L_GetMiltaryRecordDataInfo)MessagePool.Instance.Fetch(typeof(C2L_GetMiltaryRecordDataInfo)));
    public static pb::MessageParser<C2L_GetMiltaryRecordDataInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private int dataId_;
    /// <summary>
    ///录像数据Id
    /// </summary>
    public int DataId {
      get { return dataId_; }
      set {
        dataId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (DataId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DataId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (DataId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      dataId_ = 0;
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DataId = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_GetMiltaryRecordDataInfo : pb::IMessage {
    private static readonly pb::MessageParser<L2C_GetMiltaryRecordDataInfo> _parser = new pb::MessageParser<L2C_GetMiltaryRecordDataInfo>(() => (L2C_GetMiltaryRecordDataInfo)MessagePool.Instance.Fetch(typeof(L2C_GetMiltaryRecordDataInfo)));
    public static pb::MessageParser<L2C_GetMiltaryRecordDataInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETHotfix.ParticularMiltaryRecordDataInfo recordDataInfo_;
    /// <summary>
    ///录像信息
    /// </summary>
    public global::ETHotfix.ParticularMiltaryRecordDataInfo RecordDataInfo {
      get { return recordDataInfo_; }
      set {
        recordDataInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (recordDataInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RecordDataInfo);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (recordDataInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RecordDataInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (recordDataInfo_ != null) MessagePool.Instance.Recycle(recordDataInfo_); recordDataInfo_ = null;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (recordDataInfo_ == null) {
              recordDataInfo_ = new global::ETHotfix.ParticularMiltaryRecordDataInfo();
            }
            input.ReadMessage(recordDataInfo_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///录像过程全部数据
  /// </summary>
  public partial class ParticularMiltaryRecordDataInfo : pb::IMessage {
    private static readonly pb::MessageParser<ParticularMiltaryRecordDataInfo> _parser = new pb::MessageParser<ParticularMiltaryRecordDataInfo>(() => (ParticularMiltaryRecordDataInfo)MessagePool.Instance.Fetch(typeof(ParticularMiltaryRecordDataInfo)));
    public static pb::MessageParser<ParticularMiltaryRecordDataInfo> Parser { get { return _parser; } }

    private int dataId_;
    /// <summary>
    ///对应的录像战绩数据Id
    /// </summary>
    public int DataId {
      get { return dataId_; }
      set {
        dataId_ = value;
      }
    }

    private long gameEntryId_;
    /// <summary>
    ///对应的游戏类型Id
    /// </summary>
    public long GameEntryId {
      get { return gameEntryId_; }
      set {
        gameEntryId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.MiltaryRecordData> _repeated_miltaryRecordDatas_codec
        = pb::FieldCodec.ForMessage(26, global::ETHotfix.MiltaryRecordData.Parser);
    private pbc::RepeatedField<global::ETHotfix.MiltaryRecordData> miltaryRecordDatas_ = new pbc::RepeatedField<global::ETHotfix.MiltaryRecordData>();
    /// <summary>
    ///全部对局信息
    /// </summary>
    public pbc::RepeatedField<global::ETHotfix.MiltaryRecordData> MiltaryRecordDatas {
      get { return miltaryRecordDatas_; }
      set { miltaryRecordDatas_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (DataId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DataId);
      }
      if (GameEntryId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(GameEntryId);
      }
      miltaryRecordDatas_.WriteTo(output, _repeated_miltaryRecordDatas_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (DataId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataId);
      }
      if (GameEntryId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GameEntryId);
      }
      size += miltaryRecordDatas_.CalculateSize(_repeated_miltaryRecordDatas_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      dataId_ = 0;
      gameEntryId_ = 0;
      for (int i = 0; i < miltaryRecordDatas_.Count; i++) { MessagePool.Instance.Recycle(miltaryRecordDatas_[i]); }
      miltaryRecordDatas_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DataId = input.ReadInt32();
            break;
          }
          case 16: {
            GameEntryId = input.ReadInt64();
            break;
          }
          case 26: {
            miltaryRecordDatas_.AddEntriesFrom(input, _repeated_miltaryRecordDatas_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///录像过程中的单个数据
  /// </summary>
  public partial class MiltaryRecordData : pb::IMessage {
    private static readonly pb::MessageParser<MiltaryRecordData> _parser = new pb::MessageParser<MiltaryRecordData>(() => (MiltaryRecordData)MessagePool.Instance.Fetch(typeof(MiltaryRecordData)));
    public static pb::MessageParser<MiltaryRecordData> Parser { get { return _parser; } }

    private int opcode_;
    /// <summary>
    ///实体的协议号
    /// </summary>
    public int Opcode {
      get { return opcode_; }
      set {
        opcode_ = value;
      }
    }

    private pb::ByteString data_ = pb::ByteString.Empty;
    /// <summary>
    ///实体协议数据
    /// </summary>
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Opcode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Opcode);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Opcode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Opcode);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      opcode_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Opcode = input.ReadInt32();
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///领取每日救济金
  /// </summary>
  public partial class C2L_GetReliefPayment : pb::IMessage {
    private static readonly pb::MessageParser<C2L_GetReliefPayment> _parser = new pb::MessageParser<C2L_GetReliefPayment>(() => (C2L_GetReliefPayment)MessagePool.Instance.Fetch(typeof(C2L_GetReliefPayment)));
    public static pb::MessageParser<C2L_GetReliefPayment> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_GetReliefPayment : pb::IMessage {
    private static readonly pb::MessageParser<L2C_GetReliefPayment> _parser = new pb::MessageParser<L2C_GetReliefPayment>(() => (L2C_GetReliefPayment)MessagePool.Instance.Fetch(typeof(L2C_GetReliefPayment)));
    public static pb::MessageParser<L2C_GetReliefPayment> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int beansNum_;
    /// <summary>
    ///领取的豆子数
    /// </summary>
    public int BeansNum {
      get { return beansNum_; }
      set {
        beansNum_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (BeansNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BeansNum);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (BeansNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BeansNum);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      beansNum_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BeansNum = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///查询User信息
  /// </summary>
  public partial class C2L_GetUserInfo : pb::IMessage {
    private static readonly pb::MessageParser<C2L_GetUserInfo> _parser = new pb::MessageParser<C2L_GetUserInfo>(() => (C2L_GetUserInfo)MessagePool.Instance.Fetch(typeof(C2L_GetUserInfo)));
    public static pb::MessageParser<C2L_GetUserInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private static readonly pb::FieldCodec<long> _repeated_queryUserIds_codec
        = pb::FieldCodec.ForInt64(10);
    private pbc::RepeatedField<long> queryUserIds_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///要查询的userId
    /// </summary>
    public pbc::RepeatedField<long> QueryUserIds {
      get { return queryUserIds_; }
      set { queryUserIds_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      queryUserIds_.WriteTo(output, _repeated_queryUserIds_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      size += queryUserIds_.CalculateSize(_repeated_queryUserIds_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      queryUserIds_.Clear();
      rpcId_ = 0;
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            queryUserIds_.AddEntriesFrom(input, _repeated_queryUserIds_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_GetUserInfo : pb::IMessage {
    private static readonly pb::MessageParser<L2C_GetUserInfo> _parser = new pb::MessageParser<L2C_GetUserInfo>(() => (L2C_GetUserInfo)MessagePool.Instance.Fetch(typeof(L2C_GetUserInfo)));
    public static pb::MessageParser<L2C_GetUserInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.User> _repeated_userInfos_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.User.Parser);
    private pbc::RepeatedField<global::ETHotfix.User> userInfos_ = new pbc::RepeatedField<global::ETHotfix.User>();
    /// <summary>
    ///查询到的user信息
    /// </summary>
    public pbc::RepeatedField<global::ETHotfix.User> UserInfos {
      get { return userInfos_; }
      set { userInfos_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      userInfos_.WriteTo(output, _repeated_userInfos_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += userInfos_.CalculateSize(_repeated_userInfos_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < userInfos_.Count; i++) { MessagePool.Instance.Recycle(userInfos_[i]); }
      userInfos_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            userInfos_.AddEntriesFrom(input, _repeated_userInfos_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///查询抽奖记录
  /// </summary>
  public partial class C2L_QueryWinPrizeRecord : pb::IMessage {
    private static readonly pb::MessageParser<C2L_QueryWinPrizeRecord> _parser = new pb::MessageParser<C2L_QueryWinPrizeRecord>(() => (C2L_QueryWinPrizeRecord)MessagePool.Instance.Fetch(typeof(C2L_QueryWinPrizeRecord)));
    public static pb::MessageParser<C2L_QueryWinPrizeRecord> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private string account_ = "";
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string password_ = "";
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long queryUserId_;
    public long QueryUserId {
      get { return queryUserId_; }
      set {
        queryUserId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (QueryUserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(QueryUserId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(234, 5);
        output.WriteString(Password);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Account.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (QueryUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(QueryUserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      queryUserId_ = 0;
      rpcId_ = 0;
      userId_ = 0;
      account_ = "";
      password_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            QueryUserId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
          case 738: {
            Account = input.ReadString();
            break;
          }
          case 746: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_QueryWinPrizeRecord : pb::IMessage {
    private static readonly pb::MessageParser<L2C_QueryWinPrizeRecord> _parser = new pb::MessageParser<L2C_QueryWinPrizeRecord>(() => (L2C_QueryWinPrizeRecord)MessagePool.Instance.Fetch(typeof(L2C_QueryWinPrizeRecord)));
    public static pb::MessageParser<L2C_QueryWinPrizeRecord> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.WinPrizeRecord> _repeated_records_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.WinPrizeRecord.Parser);
    private pbc::RepeatedField<global::ETHotfix.WinPrizeRecord> records_ = new pbc::RepeatedField<global::ETHotfix.WinPrizeRecord>();
    /// <summary>
    ///全部中奖记录
    /// </summary>
    public pbc::RepeatedField<global::ETHotfix.WinPrizeRecord> Records {
      get { return records_; }
      set { records_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      records_.WriteTo(output, _repeated_records_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += records_.CalculateSize(_repeated_records_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < records_.Count; i++) { MessagePool.Instance.Recycle(records_[i]); }
      records_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            records_.AddEntriesFrom(input, _repeated_records_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///更改中奖记录
  /// </summary>
  public partial class C2L_ChangeWinPrizeRecordState : pb::IMessage {
    private static readonly pb::MessageParser<C2L_ChangeWinPrizeRecordState> _parser = new pb::MessageParser<C2L_ChangeWinPrizeRecordState>(() => (C2L_ChangeWinPrizeRecordState)MessagePool.Instance.Fetch(typeof(C2L_ChangeWinPrizeRecordState)));
    public static pb::MessageParser<C2L_ChangeWinPrizeRecordState> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private string account_ = "";
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string password_ = "";
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long winPrizeId_;
    /// <summary>
    ///中奖记录Id
    /// </summary>
    public long WinPrizeId {
      get { return winPrizeId_; }
      set {
        winPrizeId_ = value;
      }
    }

    private int type_;
    /// <summary>
    ///状态类型
    /// </summary>
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private string remark_ = "";
    /// <summary>
    ///备注信息
    /// </summary>
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (WinPrizeId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(WinPrizeId);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Remark);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(234, 5);
        output.WriteString(Password);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Account.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (WinPrizeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WinPrizeId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      winPrizeId_ = 0;
      type_ = 0;
      remark_ = "";
      rpcId_ = 0;
      userId_ = 0;
      account_ = "";
      password_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            WinPrizeId = input.ReadInt64();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 26: {
            Remark = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
          case 738: {
            Account = input.ReadString();
            break;
          }
          case 746: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_ChangeWinPrizeRecordState : pb::IMessage {
    private static readonly pb::MessageParser<L2C_ChangeWinPrizeRecordState> _parser = new pb::MessageParser<L2C_ChangeWinPrizeRecordState>(() => (L2C_ChangeWinPrizeRecordState)MessagePool.Instance.Fetch(typeof(L2C_ChangeWinPrizeRecordState)));
    public static pb::MessageParser<L2C_ChangeWinPrizeRecordState> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///设置代理等级
  /// </summary>
  public partial class C2L_SetAgencyLv : pb::IMessage {
    private static readonly pb::MessageParser<C2L_SetAgencyLv> _parser = new pb::MessageParser<C2L_SetAgencyLv>(() => (C2L_SetAgencyLv)MessagePool.Instance.Fetch(typeof(C2L_SetAgencyLv)));
    public static pb::MessageParser<C2L_SetAgencyLv> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private string account_ = "";
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string password_ = "";
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long agencyUserId_;
    /// <summary>
    ///设置代理的UserId
    /// </summary>
    public long AgencyUserId {
      get { return agencyUserId_; }
      set {
        agencyUserId_ = value;
      }
    }

    private int agencyLv_;
    /// <summary>
    ///代理等级
    /// </summary>
    public int AgencyLv {
      get { return agencyLv_; }
      set {
        agencyLv_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (AgencyUserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AgencyUserId);
      }
      if (AgencyLv != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AgencyLv);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(UserId);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(234, 5);
        output.WriteString(Password);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (UserId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Account.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (AgencyUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AgencyUserId);
      }
      if (AgencyLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AgencyLv);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      agencyUserId_ = 0;
      agencyLv_ = 0;
      rpcId_ = 0;
      userId_ = 0;
      account_ = "";
      password_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AgencyUserId = input.ReadInt64();
            break;
          }
          case 16: {
            AgencyLv = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            UserId = input.ReadInt64();
            break;
          }
          case 738: {
            Account = input.ReadString();
            break;
          }
          case 746: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_SetAgencyLv : pb::IMessage {
    private static readonly pb::MessageParser<L2C_SetAgencyLv> _parser = new pb::MessageParser<L2C_SetAgencyLv>(() => (L2C_SetAgencyLv)MessagePool.Instance.Fetch(typeof(L2C_SetAgencyLv)));
    public static pb::MessageParser<L2C_SetAgencyLv> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
