// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonModelMessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ETHotfix {

  #region Messages
  public partial class User : pb::IMessage {
    private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => (User)MessagePool.Instance.Fetch(typeof(User)));
    public static pb::MessageParser<User> Parser { get { return _parser; } }

    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private long beans_;
    public long Beans {
      get { return beans_; }
      set {
        beans_ = value;
      }
    }

    private long jewel_;
    public long Jewel {
      get { return jewel_; }
      set {
        jewel_ = value;
      }
    }

    private string icon_ = "";
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int sex_;
    /// <summary>
    ///1是女 2是男 0是不确定
    /// </summary>
    public int Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    private string ip_ = "";
    /// <summary>
    ///IP地址
    /// </summary>
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string location_ = "";
    /// <summary>
    ///定位地址
    /// </summary>
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private bool isOnLine_;
    /// <summary>
    ///是否在线
    /// </summary>
    public bool IsOnLine {
      get { return isOnLine_; }
      set {
        isOnLine_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (UserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserId);
      }
      if (Beans != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Beans);
      }
      if (Jewel != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Jewel);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Icon);
      }
      if (Sex != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Sex);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Ip);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Location);
      }
      if (IsOnLine != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsOnLine);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Beans != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Beans);
      }
      if (Jewel != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Jewel);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (IsOnLine != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      name_ = "";
      userId_ = 0;
      beans_ = 0;
      jewel_ = 0;
      icon_ = "";
      sex_ = 0;
      ip_ = "";
      location_ = "";
      isOnLine_ = false;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            UserId = input.ReadInt64();
            break;
          }
          case 24: {
            Beans = input.ReadInt64();
            break;
          }
          case 32: {
            Jewel = input.ReadInt64();
            break;
          }
          case 42: {
            Icon = input.ReadString();
            break;
          }
          case 48: {
            Sex = input.ReadInt32();
            break;
          }
          case 58: {
            Ip = input.ReadString();
            break;
          }
          case 66: {
            Location = input.ReadString();
            break;
          }
          case 72: {
            IsOnLine = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public partial class Commodity : pb::IMessage {
    private static readonly pb::MessageParser<Commodity> _parser = new pb::MessageParser<Commodity>(() => (Commodity)MessagePool.Instance.Fetch(typeof(Commodity)));
    public static pb::MessageParser<Commodity> Parser { get { return _parser; } }

    private long commodityId_;
    /// <summary>
    ///商品ID
    /// </summary>
    public long CommodityId {
      get { return commodityId_; }
      set {
        commodityId_ = value;
      }
    }

    private long commodityType_;
    /// <summary>
    ///商品类型
    /// </summary>
    public long CommodityType {
      get { return commodityType_; }
      set {
        commodityType_ = value;
      }
    }

    private int amount_;
    /// <summary>
    ///数量
    /// </summary>
    public int Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    private int price_;
    /// <summary>
    ///价格
    /// </summary>
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    private long monetaryType_;
    /// <summary>
    ///所需要的货币种类
    /// </summary>
    public long MonetaryType {
      get { return monetaryType_; }
      set {
        monetaryType_ = value;
      }
    }

    private int lv_;
    /// <summary>
    ///等级
    /// </summary>
    public int Lv {
      get { return lv_; }
      set {
        lv_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (CommodityId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CommodityId);
      }
      if (CommodityType != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CommodityType);
      }
      if (Amount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Amount);
      }
      if (Price != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Price);
      }
      if (MonetaryType != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(MonetaryType);
      }
      if (Lv != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Lv);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (CommodityId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CommodityId);
      }
      if (CommodityType != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CommodityType);
      }
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (MonetaryType != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MonetaryType);
      }
      if (Lv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lv);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      commodityId_ = 0;
      commodityType_ = 0;
      amount_ = 0;
      price_ = 0;
      monetaryType_ = 0;
      lv_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CommodityId = input.ReadInt64();
            break;
          }
          case 16: {
            CommodityType = input.ReadInt64();
            break;
          }
          case 24: {
            Amount = input.ReadInt32();
            break;
          }
          case 32: {
            Price = input.ReadInt32();
            break;
          }
          case 40: {
            MonetaryType = input.ReadInt64();
            break;
          }
          case 48: {
            Lv = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class SignInAward : pb::IMessage {
    private static readonly pb::MessageParser<SignInAward> _parser = new pb::MessageParser<SignInAward>(() => (SignInAward)MessagePool.Instance.Fetch(typeof(SignInAward)));
    public static pb::MessageParser<SignInAward> Parser { get { return _parser; } }

    private long goodsId_;
    /// <summary>
    ///商品ID
    /// </summary>
    public long GoodsId {
      get { return goodsId_; }
      set {
        goodsId_ = value;
      }
    }

    private int amount_;
    /// <summary>
    ///数量
    /// </summary>
    public int Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    private int numberDays_;
    /// <summary>
    ///第几天天数
    /// </summary>
    public int NumberDays {
      get { return numberDays_; }
      set {
        numberDays_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (GoodsId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(GoodsId);
      }
      if (Amount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Amount);
      }
      if (NumberDays != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NumberDays);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (GoodsId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GoodsId);
      }
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
      }
      if (NumberDays != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberDays);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      goodsId_ = 0;
      amount_ = 0;
      numberDays_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GoodsId = input.ReadInt64();
            break;
          }
          case 16: {
            Amount = input.ReadInt32();
            break;
          }
          case 24: {
            NumberDays = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class UserSingInState : pb::IMessage {
    private static readonly pb::MessageParser<UserSingInState> _parser = new pb::MessageParser<UserSingInState>(() => (UserSingInState)MessagePool.Instance.Fetch(typeof(UserSingInState)));
    public static pb::MessageParser<UserSingInState> Parser { get { return _parser; } }

    private long userId_;
    /// <summary>
    ///用户的Id
    /// </summary>
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    private long singInTime_;
    /// <summary>
    ///签到时间
    /// </summary>
    public long SingInTime {
      get { return singInTime_; }
      set {
        singInTime_ = value;
      }
    }

    private int singInDays_;
    /// <summary>
    ///已经签到的天数
    /// </summary>
    public int SingInDays {
      get { return singInDays_; }
      set {
        singInDays_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (SingInTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SingInTime);
      }
      if (SingInDays != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SingInDays);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (SingInTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SingInTime);
      }
      if (SingInDays != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SingInDays);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      userId_ = 0;
      singInTime_ = 0;
      singInDays_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            SingInTime = input.ReadInt64();
            break;
          }
          case 24: {
            SingInDays = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class GetGoodsOne : pb::IMessage {
    private static readonly pb::MessageParser<GetGoodsOne> _parser = new pb::MessageParser<GetGoodsOne>(() => (GetGoodsOne)MessagePool.Instance.Fetch(typeof(GetGoodsOne)));
    public static pb::MessageParser<GetGoodsOne> Parser { get { return _parser; } }

    private long goodsId_;
    /// <summary>
    ///商品ID
    /// </summary>
    public long GoodsId {
      get { return goodsId_; }
      set {
        goodsId_ = value;
      }
    }

    private int getAmount_;
    /// <summary>
    ///得到的数量
    /// </summary>
    public int GetAmount {
      get { return getAmount_; }
      set {
        getAmount_ = value;
      }
    }

    private long nowAmount_;
    /// <summary>
    ///现有的数量
    /// </summary>
    public long NowAmount {
      get { return nowAmount_; }
      set {
        nowAmount_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (GoodsId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(GoodsId);
      }
      if (GetAmount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GetAmount);
      }
      if (NowAmount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(NowAmount);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (GoodsId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GoodsId);
      }
      if (GetAmount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GetAmount);
      }
      if (NowAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NowAmount);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      goodsId_ = 0;
      getAmount_ = 0;
      nowAmount_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GoodsId = input.ReadInt64();
            break;
          }
          case 16: {
            GetAmount = input.ReadInt32();
            break;
          }
          case 24: {
            NowAmount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///房间信息
  /// </summary>
  public partial class RoomInfo : pb::IMessage {
    private static readonly pb::MessageParser<RoomInfo> _parser = new pb::MessageParser<RoomInfo>(() => (RoomInfo)MessagePool.Instance.Fetch(typeof(RoomInfo)));
    public static pb::MessageParser<RoomInfo> Parser { get { return _parser; } }

    private int roomId_;
    /// <summary>
    /// 房间Id
    /// </summary>
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private int friendsCircleId_;
    /// <summary>
    ///对应的亲友圈ID
    /// </summary>
    public int FriendsCircleId {
      get { return friendsCircleId_; }
      set {
        friendsCircleId_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_roomConfigLists_codec
        = pb::FieldCodec.ForInt32(26);
    private pbc::RepeatedField<int> roomConfigLists_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 房间配置信息
    /// </summary>
    public pbc::RepeatedField<int> RoomConfigLists {
      get { return roomConfigLists_; }
      set { roomConfigLists_ = value; }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.MatchPlayerInfo> _repeated_matchPlayerInfos_codec
        = pb::FieldCodec.ForMessage(34, global::ETHotfix.MatchPlayerInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.MatchPlayerInfo> matchPlayerInfos_ = new pbc::RepeatedField<global::ETHotfix.MatchPlayerInfo>();
    /// <summary>
    ///玩家信息
    /// </summary>
    public pbc::RepeatedField<global::ETHotfix.MatchPlayerInfo> MatchPlayerInfos {
      get { return matchPlayerInfos_; }
      set { matchPlayerInfos_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomId);
      }
      if (FriendsCircleId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FriendsCircleId);
      }
      roomConfigLists_.WriteTo(output, _repeated_roomConfigLists_codec);
      matchPlayerInfos_.WriteTo(output, _repeated_matchPlayerInfos_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (FriendsCircleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendsCircleId);
      }
      size += roomConfigLists_.CalculateSize(_repeated_roomConfigLists_codec);
      size += matchPlayerInfos_.CalculateSize(_repeated_matchPlayerInfos_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roomId_ = 0;
      friendsCircleId_ = 0;
      roomConfigLists_.Clear();
      for (int i = 0; i < matchPlayerInfos_.Count; i++) { MessagePool.Instance.Recycle(matchPlayerInfos_[i]); }
      matchPlayerInfos_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadInt32();
            break;
          }
          case 16: {
            FriendsCircleId = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            roomConfigLists_.AddEntriesFrom(input, _repeated_roomConfigLists_codec);
            break;
          }
          case 34: {
            matchPlayerInfos_.AddEntriesFrom(input, _repeated_matchPlayerInfos_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///游戏匹配房间配置 
  /// </summary>
  public partial class MatchRoomConfig : pb::IMessage {
    private static readonly pb::MessageParser<MatchRoomConfig> _parser = new pb::MessageParser<MatchRoomConfig>(() => (MatchRoomConfig)MessagePool.Instance.Fetch(typeof(MatchRoomConfig)));
    public static pb::MessageParser<MatchRoomConfig> Parser { get { return _parser; } }

    private string name_ = "";
    /// <summary>
    ///匹配房间显示名字
    /// </summary>
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int besansLowest_;
    /// <summary>
    ///随机匹配豆子最低数量
    /// </summary>
    public int BesansLowest {
      get { return besansLowest_; }
      set {
        besansLowest_ = value;
      }
    }

    private int baseScore_;
    /// <summary>
    ///随机匹配的底分
    /// </summary>
    public int BaseScore {
      get { return baseScore_; }
      set {
        baseScore_ = value;
      }
    }

    private int costConsume_;
    /// <summary>
    ///每小局消耗豆子的数量
    /// </summary>
    public int CostConsume {
      get { return costConsume_; }
      set {
        costConsume_ = value;
      }
    }

    private int matchRoomId_;
    /// <summary>
    ///房间ID
    /// </summary>
    public int MatchRoomId {
      get { return matchRoomId_; }
      set {
        matchRoomId_ = value;
      }
    }

    private long gameEntryId_;
    /// <summary>
    ///游戏ID
    /// </summary>
    public long GameEntryId {
      get { return gameEntryId_; }
      set {
        gameEntryId_ = value;
      }
    }

    private int gameNumber_;
    /// <summary>
    ///房间人数
    /// </summary>
    public int GameNumber {
      get { return gameNumber_; }
      set {
        gameNumber_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_roomConfigs_codec
        = pb::FieldCodec.ForInt32(66);
    private pbc::RepeatedField<int> roomConfigs_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///房间配置信息
    /// </summary>
    public pbc::RepeatedField<int> RoomConfigs {
      get { return roomConfigs_; }
      set { roomConfigs_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (BesansLowest != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BesansLowest);
      }
      if (BaseScore != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BaseScore);
      }
      if (CostConsume != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CostConsume);
      }
      if (MatchRoomId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MatchRoomId);
      }
      if (GameEntryId != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(GameEntryId);
      }
      if (GameNumber != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GameNumber);
      }
      roomConfigs_.WriteTo(output, _repeated_roomConfigs_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (BesansLowest != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BesansLowest);
      }
      if (BaseScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BaseScore);
      }
      if (CostConsume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CostConsume);
      }
      if (MatchRoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MatchRoomId);
      }
      if (GameEntryId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GameEntryId);
      }
      if (GameNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameNumber);
      }
      size += roomConfigs_.CalculateSize(_repeated_roomConfigs_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      name_ = "";
      besansLowest_ = 0;
      baseScore_ = 0;
      costConsume_ = 0;
      matchRoomId_ = 0;
      gameEntryId_ = 0;
      gameNumber_ = 0;
      roomConfigs_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            BesansLowest = input.ReadInt32();
            break;
          }
          case 24: {
            BaseScore = input.ReadInt32();
            break;
          }
          case 32: {
            CostConsume = input.ReadInt32();
            break;
          }
          case 40: {
            MatchRoomId = input.ReadInt32();
            break;
          }
          case 48: {
            GameEntryId = input.ReadInt64();
            break;
          }
          case 56: {
            GameNumber = input.ReadInt32();
            break;
          }
          case 66:
          case 64: {
            roomConfigs_.AddEntriesFrom(input, _repeated_roomConfigs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///匹配到的玩家信息
  /// </summary>
  public partial class MatchPlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<MatchPlayerInfo> _parser = new pb::MessageParser<MatchPlayerInfo>(() => (MatchPlayerInfo)MessagePool.Instance.Fetch(typeof(MatchPlayerInfo)));
    public static pb::MessageParser<MatchPlayerInfo> Parser { get { return _parser; } }

    private int seatIndex_;
    /// <summary>
    ///座位索引
    /// </summary>
    public int SeatIndex {
      get { return seatIndex_; }
      set {
        seatIndex_ = value;
      }
    }

    private global::ETHotfix.User user_;
    /// <summary>
    ///玩家信息
    /// </summary>
    public global::ETHotfix.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    private long sessionActorId_;
    /// <summary>
    ///玩家所在网关的对象Id
    /// </summary>
    public long SessionActorId {
      get { return sessionActorId_; }
      set {
        sessionActorId_ = value;
      }
    }

    private bool isAI_;
    /// <summary>
    ///是否是AI
    /// </summary>
    public bool IsAI {
      get { return isAI_; }
      set {
        isAI_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatIndex);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (SessionActorId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(SessionActorId);
      }
      if (IsAI != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsAI);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (SeatIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (SessionActorId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SessionActorId);
      }
      if (IsAI != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      seatIndex_ = 0;
      if (user_ != null) MessagePool.Instance.Recycle(user_); user_ = null;
      sessionActorId_ = 0;
      isAI_ = false;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatIndex = input.ReadInt32();
            break;
          }
          case 18: {
            if (user_ == null) {
              user_ = new global::ETHotfix.User();
            }
            input.ReadMessage(user_);
            break;
          }
          case 24: {
            SessionActorId = input.ReadInt64();
            break;
          }
          case 32: {
            IsAI = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
